AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page    1
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

6109 lines read, no errors in pass 1.
                        ;
                        ; 6 5 0 2   F U N C T I O N A L   T E S T
                        ;
                        ; Copyright (C) 2012-2020  Klaus Dormann
                        ;
                        ; This program is free software: you can redistribute it and/or modify
                        ; it under the terms of the GNU General Public License as published by
                        ; the Free Software Foundation, either version 3 of the License, or
                        ; (at your option) any later version.
                        ;
                        ; This program is distributed in the hope that it will be useful,
                        ; but WITHOUT ANY WARRANTY; without even the implied warranty of
                        ; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                        ; GNU General Public License for more details.
                        ;
                        ; You should have received a copy of the GNU General Public License
                        ; along with this program.  If not, see <http://www.gnu.org/licenses/>.
                        
                        
                        ; This program is designed to test all opcodes of a 6502 emulator using all
                        ; addressing modes with focus on propper setting of the processor status
                        ; register bits.
                        ;
                        ; version 05-jan-2020
                        ; contact info at http://2m5.de or email K@2m5.de
                        ;
                        ; assembled with AS65 written by Frank A. Kingswood
                        ; The assembler as65_142.zip can be obtained from my GitHub repository
                        ; command line switches: -l -m -s2 -w -h0
                        ;                         |  |  |   |  no page headers in listing
                        ;                         |  |  |   wide listing (133 char/col)
                        ;                         |  |  write intel hex file instead of binary
                        ;                         |  expand macros in listing
                        ;                         generate pass2 listing
                        ;
                        ; No IO - should be run from a monitor with access to registers.
                        ; To run load intel hex image with a load command, than alter PC to 400 hex
                        ; (code_segment) and enter a go command.
                        ; Loop on program counter determines error or successful completion of test.
                        ; Check listing for relevant traps (jump/branch *).
                        ; Please note that in early tests some instructions will have to be used before
                        ; they are actually tested!
                        ;
                        ; RESET, NMI or IRQ should not occur and will be trapped if vectors are enabled.
                        ; Tests documented behavior of the original NMOS 6502 only! No unofficial
                        ; opcodes. Additional opcodes of newer versions of the CPU (65C02, 65816) will
                        ; not be tested. Decimal ops will only be tested with valid BCD operands and
                        ; N V Z flags will be ignored.
                        ;
                        ; Debugging hints:
                        ;     Most of the code is written sequentially. if you hit a trap, check the
                        ;   immediately preceeding code for the instruction to be tested. Results are
                        ;   tested first, flags are checked second by pushing them onto the stack and
                        ;   pulling them to the accumulator after the result was checked. The "real"
                        ;   flags are no longer valid for the tested instruction at this time!
                        ;     If the tested instruction was indexed, the relevant index (X or Y) must
                        ;   also be checked. Opposed to the flags, X and Y registers are still valid.
                        ;
                        ; versions:
                        ;   28-jul-2012  1st version distributed for testing
                        ;   29-jul-2012  fixed references to location 0, now #0
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page    2
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                        ;                added license - GPLv3
                        ;   30-jul-2012  added configuration options
                        ;   01-aug-2012  added trap macro to allow user to change error handling
                        ;   01-dec-2012  fixed trap in branch field must be a branch
                        ;   02-mar-2013  fixed PLA flags not tested
                        ;   19-jul-2013  allowed ROM vectors to be loaded when load_data_direct = 0
                        ;                added test sequence check to detect if tests jump their fence
                        ;   23-jul-2013  added RAM integrity check option
                        ;   16-aug-2013  added error report to standard output option
                        ;   13-dec-2014  added binary/decimal opcode table switch test
                        ;   14-dec-2014  improved relative address test
                        ;   23-aug-2015  added option to disable self modifying tests
                        ;   24-aug-2015  all self modifying immediate opcodes now execute in data RAM
                        ;                added small branch offset pretest
                        ;   21-oct-2015  added option to disable decimal mode ADC & SBC tests
                        ;   04-dec-2017  fixed BRK only tested with interrupts enabled
                        ;                added option to skip the remainder of a failing test
                        ;                in report.i65
                        ;   05-jan-2020  fixed shifts not testing zero result and flag when last 1-bit
                        ;                is shifted out
                        
                        ; C O N F I G U R A T I O N
                        
                        ;ROM_vectors writable (0=no, 1=yes)
                        ;if ROM vectors can not be used interrupts will not be trapped
                        ;as a consequence BRK can not be tested but will be emulated to test RTI
0001 =                  ROM_vectors = 1
                        
                        ;load_data_direct (0=move from code segment, 1=load directly)
                        ;loading directly is preferred but may not be supported by your platform
                        ;0 produces only consecutive object code, 1 is not suitable for a binary image
0001 =                  load_data_direct = 1
                        
                        ;I_flag behavior (0=force enabled, 1=force disabled, 2=prohibit change, 3=allow
                        ;change) 2 requires extra code and is not recommended. SEI & CLI can only be
                        ;tested if you allow changing the interrupt status (I_flag = 3)
0003 =                  I_flag = 3
                        
                        ;configure memory - try to stay away from memory used by the system
                        ;zero_page memory start address, $52 (82) consecutive Bytes required
                        ;                                add 2 if I_flag = 2
000a =                  zero_page = $a
                        
                        ;data_segment memory start address, $7B (123) consecutive Bytes required
0200 =                  data_segment = $200
                            if (data_segment & $ff) != 0
                                ERROR ERROR ERROR low byte of data_segment MUST be $00 !!
                            endif
                        
                        ;code_segment memory start address, 13.1kB of consecutive space required
                        ;                                   add 2.5 kB if I_flag = 2
0400 =                  code_segment = $400
                        
                        ;self modifying code may be disabled to allow running in ROM
                        ;0=part of the code is self modifying and must reside in RAM
                        ;1=tests disabled: branch range
0000 =                  disable_selfmod = 0
                        
                        ;report errors through I/O channel (0=use standard self trap loops, 1=include
                        ;report.i65 as I/O channel, add 3.5 kB)
0000 =                  report = 0
                        
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page    3
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                        ;RAM integrity test option. Checks for undesired RAM writes.
                        ;set lowest non RAM or RAM mirror address page (-1=disable, 0=64k, $40=16k)
                        ;leave disabled if a monitor, OS or background interrupt is allowed to alter RAM
ffff =                  ram_top = -1
                        
                        ;disable test decimal mode ADC & SBC, 0=enable, 1=disable,
                        ;2=disable including decimal flag in processor status
0001 =                  disable_decimal = 1
                        
                                noopt       ;do not take shortcuts
                        
                        ;macros for error & success traps to allow user modification
                        ;example:
                        ;trap    macro
                        ;        jsr my_error_handler
                        ;        endm
                        ;trap_eq macro
                        ;        bne skip\?
                        ;        trap           ;failed equal (zero)
                        ;skip\?
                        ;        endm
                        ;
                        ; my_error_handler should pop the calling address from the stack and report it.
                        ; putting larger portions of code (more than 3 bytes) inside the trap macro
                        ; may lead to branch range problems for some tests.
                            if report = 0
                        trap    macro
                                jmp *           ;failed anyway
                                endm
                        trap_eq macro
                                beq *           ;failed equal (zero)
                                endm
                        trap_ne macro
                                bne *           ;failed not equal (non zero)
                                endm
                        trap_cs macro
                                bcs *           ;failed carry set
                                endm
                        trap_cc macro
                                bcc *           ;failed carry clear
                                endm
                        trap_mi macro
                                bmi *           ;failed minus (bit 7 set)
                                endm
                        trap_pl macro
                                bpl *           ;failed plus (bit 7 clear)
                                endm
                        trap_vs macro
                                bvs *           ;failed overflow set
                                endm
                        trap_vc macro
                                bvc *           ;failed overflow clear
                                endm
                        ; please observe that during the test the stack gets invalidated
                        ; therefore a RTS inside the success macro is not possible
                        success macro
                                jmp *           ;test passed, no errors
                                endm
                            endif
                            if report = 1
                        trap    macro
                                jsr report_error
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page    4
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                                endm
                        trap_eq macro
                                bne skip\?
                                trap           ;failed equal (zero)
                        skip\?
                                endm
                        trap_ne macro
                                beq skip\?
                                trap            ;failed not equal (non zero)
                        skip\?
                                endm
                        trap_cs macro
                                bcc skip\?
                                trap            ;failed carry set
                        skip\?
                                endm
                        trap_cc macro
                                bcs skip\?
                                trap            ;failed carry clear
                        skip\?
                                endm
                        trap_mi macro
                                bpl skip\?
                                trap            ;failed minus (bit 7 set)
                        skip\?
                                endm
                        trap_pl macro
                                bmi skip\?
                                trap            ;failed plus (bit 7 clear)
                        skip\?
                                endm
                        trap_vs macro
                                bvc skip\?
                                trap            ;failed overflow set
                        skip\?
                                endm
                        trap_vc macro
                                bvs skip\?
                                trap            ;failed overflow clear
                        skip\?
                                endm
                        ; please observe that during the test the stack gets invalidated
                        ; therefore a RTS inside the success macro is not possible
                        success macro
                                jsr report_success
                                endm
                            endif
                        
                        
0001 =                  carry   equ %00000001   ;flag bits in status
0002 =                  zero    equ %00000010
0004 =                  intdis  equ %00000100
0008 =                  decmode equ %00001000
0010 =                  break   equ %00010000
0020 =                  reserv  equ %00100000
0040 =                  overfl  equ %01000000
0080 =                  minus   equ %10000000
                        
0001 =                  fc      equ carry
0002 =                  fz      equ zero
0003 =                  fzc     equ carry+zero
0040 =                  fv      equ overfl
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page    5
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

0042 =                  fvz     equ overfl+zero
0080 =                  fn      equ minus
0081 =                  fnc     equ minus+carry
0082 =                  fnz     equ minus+zero
0083 =                  fnzc    equ minus+zero+carry
00c0 =                  fnv     equ minus+overfl
                        
0030 =                  fao     equ break+reserv    ;bits always on after PHP, BRK
0034 =                  fai     equ fao+intdis      ;+ forced interrupt disable
0038 =                  faod    equ fao+decmode     ;+ ignore decimal
003c =                  faid    equ fai+decmode     ;+ ignore decimal
00ff =                  m8      equ $ff             ;8 bit mask
00fb =                  m8i     equ $ff&~intdis     ;8 bit mask - interrupt disable
                        
                        ;macros to allow masking of status bits.
                        ;masking test of decimal bit
                        ;masking of interrupt enable/disable on load and compare
                        ;masking of always on bits after PHP or BRK (unused & break) on compare
                            if disable_decimal < 2
                                if I_flag = 0
                        load_flag   macro
                                    lda #\1&m8i         ;force enable interrupts (mask I)
                                    endm
                        cmp_flag    macro
                                    cmp #(\1|fao)&m8i   ;I_flag is always enabled + always on bits
                                    endm
                        eor_flag    macro
                                    eor #(\1&m8i|fao)   ;mask I, invert expected flags + always on bits
                                    endm
                                endif
                                if I_flag = 1
                        load_flag   macro
                                    lda #\1|intdis      ;force disable interrupts
                                    endm
                        cmp_flag    macro
                                    cmp #(\1|fai)&m8    ;I_flag is always disabled + always on bits
                                    endm
                        eor_flag    macro
                                    eor #(\1|fai)       ;invert expected flags + always on bits + I
                                    endm
                                endif
                                if I_flag = 2
                        load_flag   macro
                                    lda #\1
                                    ora flag_I_on       ;restore I-flag
                                    and flag_I_off
                                    endm
                        cmp_flag    macro
                                    eor flag_I_on       ;I_flag is never changed
                                    cmp #(\1|fao)&m8i   ;expected flags + always on bits, mask I
                                    endm
                        eor_flag    macro
                                    eor flag_I_on       ;I_flag is never changed
                                    eor #(\1&m8i|fao)   ;mask I, invert expected flags + always on bits
                                    endm
                                endif
                                if I_flag = 3
                        load_flag   macro
                                    lda #\1             ;allow test to change I-flag (no mask)
                                    endm
                        cmp_flag    macro
                                    cmp #(\1|fao)&m8    ;expected flags + always on bits
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page    6
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                                    endm
                        eor_flag    macro
                                    eor #\1|fao         ;invert expected flags + always on bits
                                    endm
                                endif
                            else
                                if I_flag = 0
                        load_flag   macro
                                    lda #\1&m8i         ;force enable interrupts (mask I)
                                    endm
                        cmp_flag    macro
                                    ora #decmode        ;ignore decimal mode bit
                                    cmp #(\1|faod)&m8i  ;I_flag is always enabled + always on bits
                                    endm
                        eor_flag    macro
                                    ora #decmode        ;ignore decimal mode bit
                                    eor #(\1&m8i|faod)  ;mask I, invert expected flags + always on bits
                                    endm
                                endif
                                if I_flag = 1
                        load_flag   macro
                                    lda #\1|intdis      ;force disable interrupts
                                    endm
                        cmp_flag    macro
                                    ora #decmode        ;ignore decimal mode bit
                                    cmp #(\1|faid)&m8   ;I_flag is always disabled + always on bits
                                    endm
                        eor_flag    macro
                                    ora #decmode        ;ignore decimal mode bit
                                    eor #(\1|faid)      ;invert expected flags + always on bits + I
                                    endm
                                endif
                                if I_flag = 2
                        load_flag   macro
                                    lda #\1
                                    ora flag_I_on       ;restore I-flag
                                    and flag_I_off
                                    endm
                        cmp_flag    macro
                                    eor flag_I_on       ;I_flag is never changed
                                    ora #decmode        ;ignore decimal mode bit
                                    cmp #(\1|faod)&m8i  ;expected flags + always on bits, mask I
                                    endm
                        eor_flag    macro
                                    eor flag_I_on       ;I_flag is never changed
                                    ora #decmode        ;ignore decimal mode bit
                                    eor #(\1&m8i|faod)  ;mask I, invert expected flags + always on bits
                                    endm
                                endif
                                if I_flag = 3
                        load_flag   macro
                                    lda #\1             ;allow test to change I-flag (no mask)
                                    endm
                        cmp_flag    macro
                                    ora #decmode        ;ignore decimal mode bit
                                    cmp #(\1|faod)&m8   ;expected flags + always on bits
                                    endm
                        eor_flag    macro
                                    ora #decmode        ;ignore decimal mode bit
                                    eor #\1|faod        ;invert expected flags + always on bits
                                    endm
                                endif
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page    7
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                            endif
                        
                        ;macros to set (register|memory|zeropage) & status
                        set_stat    macro       ;setting flags in the processor status register
                                    load_flag \1
                                    pha         ;use stack to load status
                                    plp
                                    endm
                        
                        set_a       macro       ;precharging accu & status
                                    load_flag \2
                                    pha         ;use stack to load status
                                    lda #\1     ;precharge accu
                                    plp
                                    endm
                        
                        set_x       macro       ;precharging index & status
                                    load_flag \2
                                    pha         ;use stack to load status
                                    ldx #\1     ;precharge index x
                                    plp
                                    endm
                        
                        set_y       macro       ;precharging index & status
                                    load_flag \2
                                    pha         ;use stack to load status
                                    ldy #\1     ;precharge index y
                                    plp
                                    endm
                        
                        set_ax      macro       ;precharging indexed accu & immediate status
                                    load_flag \2
                                    pha         ;use stack to load status
                                    lda \1,x    ;precharge accu
                                    plp
                                    endm
                        
                        set_ay      macro       ;precharging indexed accu & immediate status
                                    load_flag \2
                                    pha         ;use stack to load status
                                    lda \1,y    ;precharge accu
                                    plp
                                    endm
                        
                        set_z       macro       ;precharging indexed zp & immediate status
                                    load_flag \2
                                    pha         ;use stack to load status
                                    lda \1,x    ;load to zeropage
                                    sta zpt
                                    plp
                                    endm
                        
                        set_zx      macro       ;precharging zp,x & immediate status
                                    load_flag \2
                                    pha         ;use stack to load status
                                    lda \1,x    ;load to indexed zeropage
                                    sta zpt,x
                                    plp
                                    endm
                        
                        set_abs     macro       ;precharging indexed memory & immediate status
                                    load_flag \2
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page    8
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                                    pha         ;use stack to load status
                                    lda \1,x    ;load to memory
                                    sta abst
                                    plp
                                    endm
                        
                        set_absx    macro       ;precharging abs,x & immediate status
                                    load_flag \2
                                    pha         ;use stack to load status
                                    lda \1,x    ;load to indexed memory
                                    sta abst,x
                                    plp
                                    endm
                        
                        ;macros to test (register|memory|zeropage) & status & (mask)
                        tst_stat    macro       ;testing flags in the processor status register
                                    php         ;save status
                                    pla         ;use stack to retrieve status
                                    pha
                                    cmp_flag \1
                                    trap_ne
                                    plp         ;restore status
                                    endm
                        
                        tst_a       macro       ;testing result in accu & flags
                                    php         ;save flags
                                    cmp #\1     ;test result
                                    trap_ne
                                    pla         ;load status
                                    pha
                                    cmp_flag \2
                                    trap_ne
                                    plp         ;restore status
                                    endm
                        
                        tst_x       macro       ;testing result in x index & flags
                                    php         ;save flags
                                    cpx #\1     ;test result
                                    trap_ne
                                    pla         ;load status
                                    pha
                                    cmp_flag \2
                                    trap_ne
                                    plp         ;restore status
                                    endm
                        
                        tst_y       macro       ;testing result in y index & flags
                                    php         ;save flags
                                    cpy #\1     ;test result
                                    trap_ne
                                    pla         ;load status
                                    pha
                                    cmp_flag \2
                                    trap_ne
                                    plp         ;restore status
                                    endm
                        
                        tst_ax      macro       ;indexed testing result in accu & flags
                                    php         ;save flags
                                    cmp \1,x    ;test result
                                    trap_ne
                                    pla         ;load status
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page    9
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                                    eor_flag \3
                                    cmp \2,x    ;test flags
                                    trap_ne     ;
                                    endm
                        
                        tst_ay      macro       ;indexed testing result in accu & flags
                                    php         ;save flags
                                    cmp \1,y    ;test result
                                    trap_ne     ;
                                    pla         ;load status
                                    eor_flag \3
                                    cmp \2,y    ;test flags
                                    trap_ne
                                    endm
                        
                        tst_z       macro       ;indexed testing result in zp & flags
                                    php         ;save flags
                                    lda zpt
                                    cmp \1,x    ;test result
                                    trap_ne
                                    pla         ;load status
                                    eor_flag \3
                                    cmp \2,x    ;test flags
                                    trap_ne
                                    endm
                        
                        tst_zx      macro       ;testing result in zp,x & flags
                                    php         ;save flags
                                    lda zpt,x
                                    cmp \1,x    ;test result
                                    trap_ne
                                    pla         ;load status
                                    eor_flag \3
                                    cmp \2,x    ;test flags
                                    trap_ne
                                    endm
                        
                        tst_abs     macro       ;indexed testing result in memory & flags
                                    php         ;save flags
                                    lda abst
                                    cmp \1,x    ;test result
                                    trap_ne
                                    pla         ;load status
                                    eor_flag \3
                                    cmp \2,x    ;test flags
                                    trap_ne
                                    endm
                        
                        tst_absx    macro       ;testing result in abs,x & flags
                                    php         ;save flags
                                    lda abst,x
                                    cmp \1,x    ;test result
                                    trap_ne
                                    pla         ;load status
                                    eor_flag \3
                                    cmp \2,x    ;test flags
                                    trap_ne
                                    endm
                        
                        ; RAM integrity test
                        ;   verifies that none of the previous tests has altered RAM outside of the
                        ;   designated write areas.
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   10
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                        ;   uses zpt word as indirect pointer, zpt+2 word as checksum
                                if ram_top > -1
                        check_ram   macro
                                    cld
                                    lda #0
                                    sta zpt         ;set low byte of indirect pointer
                                    sta zpt+3       ;checksum high byte
                                  if disable_selfmod = 0
                                    sta range_adr   ;reset self modifying code
                                  endif
                                    clc
                                    ldx #zp_bss-zero_page ;zeropage - write test area
                        ccs3\?      adc zero_page,x
                                    bcc ccs2\?
                                    inc zpt+3       ;carry to high byte
                                    clc
                        ccs2\?      inx
                                    bne ccs3\?
                                    ldx #hi(abs1)   ;set high byte of indirect pointer
                                    stx zpt+1
                                    ldy #lo(abs1)   ;data after write & execute test area
                        ccs5\?      adc (zpt),y
                                    bcc ccs4\?
                                    inc zpt+3       ;carry to high byte
                                    clc
                        ccs4\?      iny
                                    bne ccs5\?
                                    inx             ;advance RAM high address
                                    stx zpt+1
                                    cpx #ram_top
                                    bne ccs5\?
                                    sta zpt+2       ;checksum low is
                                    cmp ram_chksm   ;checksum low expected
                                    trap_ne         ;checksum mismatch
                                    lda zpt+3       ;checksum high is
                                    cmp ram_chksm+1 ;checksum high expected
                                    trap_ne         ;checksum mismatch
                                    endm
                                else
                        check_ram   macro
                                    ;RAM check disabled - RAM size not set
                                    endm
                                endif
                        
                        next_test   macro           ;make sure, tests don't jump the fence
                                    lda test_case   ;previous test
                                    cmp #test_num
                                    trap_ne         ;test is out of sequence
                        test_num = test_num + 1
                                    lda #test_num   ;*** next tests' number
                                    sta test_case
                                    ;check_ram       ;uncomment to find altered RAM after each test
                                    endm
                        
                            if load_data_direct = 1
                                data
                            else
                                bss                 ;uninitialized segment, copy of data at end of code!
                            endif
000a =                          org zero_page
                        ;break test interrupt save
000a : 00               irq_a   ds  1               ;a register
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   11
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

000b : 00               irq_x   ds  1               ;x register
                            if I_flag = 2
                        ;masking for I bit in status
                        flag_I_on   ds  1           ;or mask to load flags
                        flag_I_off  ds  1           ;and mask to load flags
                            endif
000c :                  zpt                         ;6 bytes store/modify test area
                        ;add/subtract operand generation and result/flag prediction
000c : 00               adfc    ds  1               ;carry flag before op
000d : 00               ad1     ds  1               ;operand 1 - accumulator
000e : 00               ad2     ds  1               ;operand 2 - memory / immediate
000f : 00               adrl    ds  1               ;expected result bits 0-7
0010 : 00               adrh    ds  1               ;expected result bit 8 (carry)
0011 : 00               adrf    ds  1               ;expected flags NV0000ZC (only binary mode)
0012 : 00               sb2     ds  1               ;operand 2 complemented for subtract
0013 :                  zp_bss
0013 : 8001             zps     db  $80,1           ;additional shift pattern to test zero result & flag
0015 : c3824100         zp1     db  $c3,$82,$41,0   ;test patterns for LDx BIT ROL ROR ASL LSR
0019 : 7f               zp7f    db  $7f             ;test pattern for compare
                        ;logical zeropage operands
001a : 001f7180         zpOR    db  0,$1f,$71,$80   ;test pattern for OR
001e : 0fff7f80         zpAN    db  $0f,$ff,$7f,$80 ;test pattern for AND
0022 : ff0f8f8f         zpEO    db  $ff,$0f,$8f,$8f ;test pattern for EOR
                        ;indirect addressing pointers
0026 : 1802             ind1    dw  abs1            ;indirect pointer to pattern in absolute memory
0028 : 1902                     dw  abs1+1
002a : 1a02                     dw  abs1+2
002c : 1b02                     dw  abs1+3
002e : 1c02                     dw  abs7f
0030 : 2001             inw1    dw  abs1-$f8        ;indirect pointer for wrap-test pattern
0032 : 0302             indt    dw  abst            ;indirect pointer to store area in absolute memory
0034 : 0402                     dw  abst+1
0036 : 0502                     dw  abst+2
0038 : 0602                     dw  abst+3
003a : 0b01             inwt    dw  abst-$f8        ;indirect pointer for wrap-test store
003c : 5f02             indAN   dw  absAN           ;indirect pointer to AND pattern in absolute memory
003e : 6002                     dw  absAN+1
0040 : 6102                     dw  absAN+2
0042 : 6202                     dw  absAN+3
0044 : 6302             indEO   dw  absEO           ;indirect pointer to EOR pattern in absolute memory
0046 : 6402                     dw  absEO+1
0048 : 6502                     dw  absEO+2
004a : 6602                     dw  absEO+3
004c : 5b02             indOR   dw  absOR           ;indirect pointer to OR pattern in absolute memory
004e : 5c02                     dw  absOR+1
0050 : 5d02                     dw  absOR+2
0052 : 5e02                     dw  absOR+3
                        ;add/subtract indirect pointers
0054 : 0302             adi2    dw  ada2            ;indirect pointer to operand 2 in absolute memory
0056 : 0402             sbi2    dw  sba2            ;indirect pointer to complemented operand 2 (SBC)
0058 : 0401             adiy2   dw  ada2-$ff        ;with offset for indirect indexed
005a : 0501             sbiy2   dw  sba2-$ff
005c :                  zp_bss_end
                        
0200 =                          org data_segment
0200 : 00               test_case   ds  1           ;current test number
0201 : 0000             ram_chksm   ds  2           ;checksum for RAM integrity test
                        ;add/subtract operand copy - abs tests write area
0203 :                  abst                        ;6 bytes store/modify test area
0203 : 00               ada2    ds  1               ;operand 2
0204 : 00               sba2    ds  1               ;operand 2 complemented for subtract
0205 : 00000000                 ds  4               ;fill remaining bytes
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   12
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

0209 :                  data_bss
                            if load_data_direct = 1
0209 : 2900             ex_andi and #0              ;execute immediate opcodes
020b : 60                       rts
020c : 4900             ex_eori eor #0              ;execute immediate opcodes
020e : 60                       rts
020f : 0900             ex_orai ora #0              ;execute immediate opcodes
0211 : 60                       rts
0212 : 6900             ex_adci adc #0              ;execute immediate opcodes
0214 : 60                       rts
0215 : e900             ex_sbci sbc #0              ;execute immediate opcodes
0217 : 60                       rts
                            else
                        ex_andi ds  3
                        ex_eori ds  3
                        ex_orai ds  3
                        ex_adci ds  3
                        ex_sbci ds  3
                            endif
                        ;zps    db  $80,1           ;additional shift patterns test zero result & flag
0218 : c3824100         abs1    db  $c3,$82,$41,0   ;test patterns for LDx BIT ROL ROR ASL LSR
021c : 7f               abs7f   db  $7f             ;test pattern for compare
                        ;loads
021d : 80800002         fLDx    db  fn,fn,0,fz              ;expected flags for load
                        ;shifts
0221 :                  rASL                                ;expected result ASL & ROL -carry
0221 : 000286048200     rROL    db  0,2,$86,$04,$82,0
0227 : 010387058301     rROLc   db  1,3,$87,$05,$83,1       ;expected result ROL +carry
022d :                  rLSR                                ;expected result LSR & ROR -carry
022d : 400061412000     rROR    db  $40,0,$61,$41,$20,0
0233 : c080e1c1a080     rRORc   db  $c0,$80,$e1,$c1,$a0,$80 ;expected result ROR +carry
0239 :                  fASL                                ;expected flags for shifts
0239 : 030081018002     fROL    db  fzc,0,fnc,fc,fn,fz      ;no carry in
023f : 010081018000     fROLc   db  fc,0,fnc,fc,fn,0        ;carry in
0245 :                  fLSR
0245 : 000301000102     fROR    db  0,fzc,fc,0,fc,fz        ;no carry in
024b : 808181808180     fRORc   db  fn,fnc,fnc,fn,fnc,fn    ;carry in
                        ;increments (decrements)
0251 : 7f80ff0001       rINC    db  $7f,$80,$ff,0,1         ;expected result for INC/DEC
0256 : 0080800200       fINC    db  0,fn,fn,fz,0            ;expected flags for INC/DEC
                        ;logical memory operand
025b : 001f7180         absOR   db  0,$1f,$71,$80           ;test pattern for OR
025f : 0fff7f80         absAN   db  $0f,$ff,$7f,$80         ;test pattern for AND
0263 : ff0f8f8f         absEO   db  $ff,$0f,$8f,$8f         ;test pattern for EOR
                        ;logical accu operand
0267 : 00f11f00         absORa  db  0,$f1,$1f,0             ;test pattern for OR
026b : f0ffffff         absANa  db  $f0,$ff,$ff,$ff         ;test pattern for AND
026f : fff0f00f         absEOa  db  $ff,$f0,$f0,$0f         ;test pattern for EOR
                        ;logical results
0273 : 00ff7f80         absrlo  db  0,$ff,$7f,$80
0277 : 02800080         absflo  db  fz,fn,0,fn
027b :                  data_bss_end
                        
                        
                                code
0400 =                          org code_segment
0400 : d8               start   cld
0401 : a2ff                     ldx #$ff
0403 : 9a                       txs
0404 : a900                     lda #0          ;*** test 0 = initialize
0406 : 8d0002                   sta test_case
0000 =                  test_num = 0
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   13
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                        
                        ;stop interrupts before initializing BSS
                            if I_flag = 1
                                sei
                            endif
                        
                        ;initialize I/O for report channel
                            if report = 1
                                jsr report_init
                            endif
                        
                        ;pretest small branch offset
0409 : a205                     ldx #5
040b : 4c3304                   jmp psb_test
040e :                  psb_bwok
040e : a005                     ldy #5
0410 : d008                     bne psb_forw
                                trap        ;branch should be taken
                        
0415 : 88                       dey         ;forward landing zone
0416 : 88                       dey
0417 : 88                       dey
0418 : 88                       dey
0419 : 88                       dey
041a :                  psb_forw
041a : 88                       dey
041b : 88                       dey
041c : 88                       dey
041d : 88                       dey
041e : 88                       dey
041f : f017                     beq psb_fwok
                                trap        ;forward offset
                        
                        
0424 : ca                       dex         ;backward landing zone
0425 : ca                       dex
0426 : ca                       dex
0427 : ca                       dex
0428 : ca                       dex
0429 :                  psb_back
0429 : ca                       dex
042a : ca                       dex
042b : ca                       dex
042c : ca                       dex
042d : ca                       dex
042e : f0de                     beq psb_bwok
                                trap        ;backward offset
                        
0433 :                  psb_test
0433 : d0f4                     bne psb_back
                                trap        ;branch should be taken
                        
0438 :                  psb_fwok
                        
                        ;initialize BSS segment
                            if load_data_direct != 1
                                ldx #zp_end-zp_init-1
                        ld_zp   lda zp_init,x
                                sta zp_bss,x
                                dex
                                bpl ld_zp
                                ldx #data_end-data_init-1
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   14
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                        ld_data lda data_init,x
                                sta data_bss,x
                                dex
                                bpl ld_data
                              if ROM_vectors = 1
                                ldx #5
                        ld_vect lda vec_init,x
                                sta vec_bss,x
                                dex
                                bpl ld_vect
                              endif
                            endif
                        
                        ;retain status of interrupt flag
                            if I_flag = 2
                                php
                                pla
                                and #4          ;isolate flag
                                sta flag_I_on   ;or mask
                                eor #lo(~4)     ;reverse
                                sta flag_I_off  ;and mask
                            endif
                        
                        ;generate checksum for RAM integrity test
                            if ram_top > -1
                                lda #0
                                sta zpt         ;set low byte of indirect pointer
                                sta ram_chksm+1 ;checksum high byte
                              if disable_selfmod = 0
                                sta range_adr   ;reset self modifying code
                              endif
                                clc
                                ldx #zp_bss-zero_page ;zeropage - write test area
                        gcs3    adc zero_page,x
                                bcc gcs2
                                inc ram_chksm+1 ;carry to high byte
                                clc
                        gcs2    inx
                                bne gcs3
                                ldx #hi(abs1)   ;set high byte of indirect pointer
                                stx zpt+1
                                ldy #lo(abs1)   ;data after write & execute test area
                        gcs5    adc (zpt),y
                                bcc gcs4
                                inc ram_chksm+1 ;carry to high byte
                                clc
                        gcs4    iny
                                bne gcs5
                                inx             ;advance RAM high address
                                stx zpt+1
                                cpx #ram_top
                                bne gcs5
                                sta ram_chksm   ;checksum complete
                            endif
                                next_test
                        
                        
                            if disable_selfmod = 0
                        ;testing relative addressing with BEQ
0444 : a0fe                     ldy #$fe        ;testing maximum range, not -1/-2 (invalid/self adr)
0446 :                  range_loop
0446 : 88                       dey             ;next relative address
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   15
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

0447 : 98                       tya
0448 : aa                       tax             ;precharge count to end of loop
0449 : 1008                     bpl range_fw    ;calculate relative address
044b : 18                       clc             ;avoid branch self or to relative address of branch
044c : 6902                     adc #2
044e : ea                       nop             ;offset landing zone - tolerate +/-5 offset to branch
044f : ea                       nop
0450 : ea                       nop
0451 : ea                       nop
0452 : ea                       nop
0453 :                  range_fw
0453 : ea                       nop
0454 : ea                       nop
0455 : ea                       nop
0456 : ea                       nop
0457 : ea                       nop
0458 : 497f                     eor #$7f        ;complement except sign
045a : 8de604                   sta range_adr   ;load into test target
045d : a900                     lda #0          ;should set zero flag in status register
045f : 4ce504                   jmp range_op
                        
0462 : ca                       dex             ; offset landing zone - backward branch too far
0463 : ca                       dex
0464 : ca                       dex
0465 : ca                       dex
0466 : ca                       dex
                                ;relative address target field with branch under test in the middle
0467 : ca                       dex             ;-128 - max backward
0468 : ca                       dex
0469 : ca                       dex
046a : ca                       dex
046b : ca                       dex
046c : ca                       dex
046d : ca                       dex
046e : ca                       dex
046f : ca                       dex             ;-120
0470 : ca                       dex
0471 : ca                       dex
0472 : ca                       dex
0473 : ca                       dex
0474 : ca                       dex
0475 : ca                       dex
0476 : ca                       dex
0477 : ca                       dex
0478 : ca                       dex
0479 : ca                       dex             ;-110
047a : ca                       dex
047b : ca                       dex
047c : ca                       dex
047d : ca                       dex
047e : ca                       dex
047f : ca                       dex
0480 : ca                       dex
0481 : ca                       dex
0482 : ca                       dex
0483 : ca                       dex             ;-100
0484 : ca                       dex
0485 : ca                       dex
0486 : ca                       dex
0487 : ca                       dex
0488 : ca                       dex
0489 : ca                       dex
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   16
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

048a : ca                       dex
048b : ca                       dex
048c : ca                       dex
048d : ca                       dex             ;-90
048e : ca                       dex
048f : ca                       dex
0490 : ca                       dex
0491 : ca                       dex
0492 : ca                       dex
0493 : ca                       dex
0494 : ca                       dex
0495 : ca                       dex
0496 : ca                       dex
0497 : ca                       dex             ;-80
0498 : ca                       dex
0499 : ca                       dex
049a : ca                       dex
049b : ca                       dex
049c : ca                       dex
049d : ca                       dex
049e : ca                       dex
049f : ca                       dex
04a0 : ca                       dex
04a1 : ca                       dex             ;-70
04a2 : ca                       dex
04a3 : ca                       dex
04a4 : ca                       dex
04a5 : ca                       dex
04a6 : ca                       dex
04a7 : ca                       dex
04a8 : ca                       dex
04a9 : ca                       dex
04aa : ca                       dex
04ab : ca                       dex             ;-60
04ac : ca                       dex
04ad : ca                       dex
04ae : ca                       dex
04af : ca                       dex
04b0 : ca                       dex
04b1 : ca                       dex
04b2 : ca                       dex
04b3 : ca                       dex
04b4 : ca                       dex
04b5 : ca                       dex             ;-50
04b6 : ca                       dex
04b7 : ca                       dex
04b8 : ca                       dex
04b9 : ca                       dex
04ba : ca                       dex
04bb : ca                       dex
04bc : ca                       dex
04bd : ca                       dex
04be : ca                       dex
04bf : ca                       dex             ;-40
04c0 : ca                       dex
04c1 : ca                       dex
04c2 : ca                       dex
04c3 : ca                       dex
04c4 : ca                       dex
04c5 : ca                       dex
04c6 : ca                       dex
04c7 : ca                       dex
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   17
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

04c8 : ca                       dex
04c9 : ca                       dex             ;-30
04ca : ca                       dex
04cb : ca                       dex
04cc : ca                       dex
04cd : ca                       dex
04ce : ca                       dex
04cf : ca                       dex
04d0 : ca                       dex
04d1 : ca                       dex
04d2 : ca                       dex
04d3 : ca                       dex             ;-20
04d4 : ca                       dex
04d5 : ca                       dex
04d6 : ca                       dex
04d7 : ca                       dex
04d8 : ca                       dex
04d9 : ca                       dex
04da : ca                       dex
04db : ca                       dex
04dc : ca                       dex
04dd : ca                       dex             ;-10
04de : ca                       dex
04df : ca                       dex
04e0 : ca                       dex
04e1 : ca                       dex
04e2 : ca                       dex
04e3 : ca                       dex
04e4 : ca                       dex             ;-3
04e5 :                  range_op                ;test target with zero flag=0, z=1 if previous dex
04e6 =                  range_adr   = *+1       ;modifiable relative address
04e5 : f03e                     beq *+64        ;+64 if called without modification
04e7 : ca                       dex             ;+0
04e8 : ca                       dex
04e9 : ca                       dex
04ea : ca                       dex
04eb : ca                       dex
04ec : ca                       dex
04ed : ca                       dex
04ee : ca                       dex
04ef : ca                       dex
04f0 : ca                       dex
04f1 : ca                       dex             ;+10
04f2 : ca                       dex
04f3 : ca                       dex
04f4 : ca                       dex
04f5 : ca                       dex
04f6 : ca                       dex
04f7 : ca                       dex
04f8 : ca                       dex
04f9 : ca                       dex
04fa : ca                       dex
04fb : ca                       dex             ;+20
04fc : ca                       dex
04fd : ca                       dex
04fe : ca                       dex
04ff : ca                       dex
0500 : ca                       dex
0501 : ca                       dex
0502 : ca                       dex
0503 : ca                       dex
0504 : ca                       dex
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   18
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

0505 : ca                       dex             ;+30
0506 : ca                       dex
0507 : ca                       dex
0508 : ca                       dex
0509 : ca                       dex
050a : ca                       dex
050b : ca                       dex
050c : ca                       dex
050d : ca                       dex
050e : ca                       dex
050f : ca                       dex             ;+40
0510 : ca                       dex
0511 : ca                       dex
0512 : ca                       dex
0513 : ca                       dex
0514 : ca                       dex
0515 : ca                       dex
0516 : ca                       dex
0517 : ca                       dex
0518 : ca                       dex
0519 : ca                       dex             ;+50
051a : ca                       dex
051b : ca                       dex
051c : ca                       dex
051d : ca                       dex
051e : ca                       dex
051f : ca                       dex
0520 : ca                       dex
0521 : ca                       dex
0522 : ca                       dex
0523 : ca                       dex             ;+60
0524 : ca                       dex
0525 : ca                       dex
0526 : ca                       dex
0527 : ca                       dex
0528 : ca                       dex
0529 : ca                       dex
052a : ca                       dex
052b : ca                       dex
052c : ca                       dex
052d : ca                       dex             ;+70
052e : ca                       dex
052f : ca                       dex
0530 : ca                       dex
0531 : ca                       dex
0532 : ca                       dex
0533 : ca                       dex
0534 : ca                       dex
0535 : ca                       dex
0536 : ca                       dex
0537 : ca                       dex             ;+80
0538 : ca                       dex
0539 : ca                       dex
053a : ca                       dex
053b : ca                       dex
053c : ca                       dex
053d : ca                       dex
053e : ca                       dex
053f : ca                       dex
0540 : ca                       dex
0541 : ca                       dex             ;+90
0542 : ca                       dex
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   19
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

0543 : ca                       dex
0544 : ca                       dex
0545 : ca                       dex
0546 : ca                       dex
0547 : ca                       dex
0548 : ca                       dex
0549 : ca                       dex
054a : ca                       dex
054b : ca                       dex             ;+100
054c : ca                       dex
054d : ca                       dex
054e : ca                       dex
054f : ca                       dex
0550 : ca                       dex
0551 : ca                       dex
0552 : ca                       dex
0553 : ca                       dex
0554 : ca                       dex
0555 : ca                       dex             ;+110
0556 : ca                       dex
0557 : ca                       dex
0558 : ca                       dex
0559 : ca                       dex
055a : ca                       dex
055b : ca                       dex
055c : ca                       dex
055d : ca                       dex
055e : ca                       dex
055f : ca                       dex             ;+120
0560 : ca                       dex
0561 : ca                       dex
0562 : ca                       dex
0563 : ca                       dex
0564 : ca                       dex
0565 : ca                       dex
0566 : ea                       nop             ;offset landing zone - forward branch too far
0567 : ea                       nop
0568 : ea                       nop
0569 : ea                       nop
056a : ea                       nop
056b : f008                     beq range_ok    ;+127 - max forward
                                trap            ; bad range
                        
0570 : ea                       nop             ;offset landing zone - tolerate +/-5 offset to branch
0571 : ea                       nop
0572 : ea                       nop
0573 : ea                       nop
0574 : ea                       nop
0575 :                  range_ok
0575 : ea                       nop
0576 : ea                       nop
0577 : ea                       nop
0578 : ea                       nop
0579 : ea                       nop
057a : c000                     cpy #0
057c : f003                     beq range_end
057e : 4c4604                   jmp range_loop
0581 :                  range_end               ;range test successful
                            endif
                                next_test
                        
                        
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   20
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                        ;partial test BNE & CMP, CPX, CPY immediate
058d : c001                     cpy #1          ;testing BNE true
058f : d003                     bne test_bne
                                trap
                        
0594 :                  test_bne
0594 : a900                     lda #0
0596 : c900                     cmp #0          ;test compare immediate
                                trap_ne
                        
                                trap_cc
                        
                                trap_mi
                        
059e : c901                     cmp #1
                                trap_eq
                        
                                trap_cs
                        
                                trap_pl
                        
05a6 : aa                       tax
05a7 : e000                     cpx #0          ;test compare x immediate
                                trap_ne
                        
                                trap_cc
                        
                                trap_mi
                        
05af : e001                     cpx #1
                                trap_eq
                        
                                trap_cs
                        
                                trap_pl
                        
05b7 : a8                       tay
05b8 : c000                     cpy #0          ;test compare y immediate
                                trap_ne
                        
                                trap_cc
                        
                                trap_mi
                        
05c0 : c001                     cpy #1
                                trap_eq
                        
                                trap_cs
                        
                                trap_pl
                        
                                next_test
                        
                        ;testing stack operations PHA PHP PLA PLP
                        
05d4 : a2ff                     ldx #$ff        ;initialize stack
05d6 : 9a                       txs
05d7 : a955                     lda #$55
05d9 : 48                       pha
05da : a9aa                     lda #$aa
05dc : 48                       pha
05dd : cdfe01                   cmp $1fe        ;on stack ?
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   21
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                                trap_ne
                        
05e2 : ba                       tsx
05e3 : 8a                       txa             ;overwrite accu
05e4 : c9fd                     cmp #$fd        ;sp decremented?
                                trap_ne
                        
05e8 : 68                       pla
05e9 : c9aa                     cmp #$aa        ;successful retreived from stack?
                                trap_ne
                        
05ed : 68                       pla
05ee : c955                     cmp #$55
                                trap_ne
                        
05f2 : cdff01                   cmp $1ff        ;remains on stack?
                                trap_ne
                        
05f7 : ba                       tsx
05f8 : e0ff                     cpx #$ff        ;sp incremented?
                                trap_ne
                        
                                next_test
                        
                        
                        ;testing branch decisions BPL BMI BVC BVS BCC BCS BNE BEQ
                                set_stat $ff    ;all on
                        
060c : 101a                     bpl nbr1        ;branches should not be taken
060e : 501b                     bvc nbr2
0610 : 901c                     bcc nbr3
0612 : d01d                     bne nbr4
0614 : 3003                     bmi br1         ;branches should be taken
                                trap
                        
0619 : 7003             br1     bvs br2
                                trap
                        
061e : b003             br2     bcs br3
                                trap
                        
0623 : f00f             br3     beq br4
                                trap
                        
0628 :                  nbr1
                                trap            ;previous bpl taken
                        
062b :                  nbr2
                                trap            ;previous bvc taken
                        
062e :                  nbr3
                                trap            ;previous bcc taken
                        
0631 :                  nbr4
                                trap            ;previous bne taken
                        
0634 : 08               br4     php
0635 : ba                       tsx
0636 : e0fe                     cpx #$fe        ;sp after php?
                                trap_ne
                        
063a : 68                       pla
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   22
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                                cmp_flag $ff    ;returned all flags on?
                        
                                trap_ne
                        
063f : ba                       tsx
0640 : e0ff                     cpx #$ff        ;sp after php?
                                trap_ne
                        
                                set_stat 0      ;all off
                        
0648 : 301a                     bmi nbr11       ;branches should not be taken
064a : 701b                     bvs nbr12
064c : b01c                     bcs nbr13
064e : f01d                     beq nbr14
0650 : 1003                     bpl br11        ;branches should be taken
                                trap
                        
0655 : 5003             br11    bvc br12
                                trap
                        
065a : 9003             br12    bcc br13
                                trap
                        
065f : d00f             br13    bne br14
                                trap
                        
0664 :                  nbr11
                                trap            ;previous bmi taken
                        
0667 :                  nbr12
                                trap            ;previous bvs taken
                        
066a :                  nbr13
                                trap            ;previous bcs taken
                        
066d :                  nbr14
                                trap            ;previous beq taken
                        
0670 : 08               br14    php
0671 : 68                       pla
                                cmp_flag 0      ;flags off except break (pushed by sw) + reserved?
                        
                                trap_ne
                        
                                ;crosscheck flags
                                set_stat zero
                        
067a : d002                     bne brzs1
067c : f003                     beq brzs2
067e :                  brzs1
                                trap            ;branch zero/non zero
                        
0681 : b002             brzs2   bcs brzs3
0683 : 9003                     bcc brzs4
0685 :                  brzs3
                                trap            ;branch carry/no carry
                        
0688 : 3002             brzs4   bmi brzs5
068a : 1003                     bpl brzs6
068c :                  brzs5
                                trap            ;branch minus/plus
                        
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   23
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

068f : 7002             brzs6   bvs brzs7
0691 : 5003                     bvc brzs8
0693 :                  brzs7
                                trap            ;branch overflow/no overflow
                        
0696 :                  brzs8
                                set_stat carry
                        
069a : f002                     beq brcs1
069c : d003                     bne brcs2
069e :                  brcs1
                                trap            ;branch zero/non zero
                        
06a1 : 9002             brcs2   bcc brcs3
06a3 : b003                     bcs brcs4
06a5 :                  brcs3
                                trap            ;branch carry/no carry
                        
06a8 : 3002             brcs4   bmi brcs5
06aa : 1003                     bpl brcs6
06ac :                  brcs5
                                trap            ;branch minus/plus
                        
06af : 7002             brcs6   bvs brcs7
06b1 : 5003                     bvc brcs8
06b3 :                  brcs7
                                trap            ;branch overflow/no overflow
                        
                        
06b6 :                  brcs8
                                set_stat minus
                        
06ba : f002                     beq brmi1
06bc : d003                     bne brmi2
06be :                  brmi1
                                trap            ;branch zero/non zero
                        
06c1 : b002             brmi2   bcs brmi3
06c3 : 9003                     bcc brmi4
06c5 :                  brmi3
                                trap            ;branch carry/no carry
                        
06c8 : 1002             brmi4   bpl brmi5
06ca : 3003                     bmi brmi6
06cc :                  brmi5
                                trap            ;branch minus/plus
                        
06cf : 7002             brmi6   bvs brmi7
06d1 : 5003                     bvc brmi8
06d3 :                  brmi7
                                trap            ;branch overflow/no overflow
                        
06d6 :                  brmi8
                                set_stat overfl
                        
06da : f002                     beq brvs1
06dc : d003                     bne brvs2
06de :                  brvs1
                                trap            ;branch zero/non zero
                        
06e1 : b002             brvs2   bcs brvs3
06e3 : 9003                     bcc brvs4
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   24
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

06e5 :                  brvs3
                                trap            ;branch carry/no carry
                        
06e8 : 3002             brvs4   bmi brvs5
06ea : 1003                     bpl brvs6
06ec :                  brvs5
                                trap            ;branch minus/plus
                        
06ef : 5002             brvs6   bvc brvs7
06f1 : 7003                     bvs brvs8
06f3 :                  brvs7
                                trap            ;branch overflow/no overflow
                        
06f6 :                  brvs8
                                set_stat $ff-zero
                        
06fa : f002                     beq brzc1
06fc : d003                     bne brzc2
06fe :                  brzc1
                                trap            ;branch zero/non zero
                        
0701 : 9002             brzc2   bcc brzc3
0703 : b003                     bcs brzc4
0705 :                  brzc3
                                trap            ;branch carry/no carry
                        
0708 : 1002             brzc4   bpl brzc5
070a : 3003                     bmi brzc6
070c :                  brzc5
                                trap            ;branch minus/plus
                        
070f : 5002             brzc6   bvc brzc7
0711 : 7003                     bvs brzc8
0713 :                  brzc7
                                trap            ;branch overflow/no overflow
                        
0716 :                  brzc8
                                set_stat $ff-carry
                        
071a : d002                     bne brcc1
071c : f003                     beq brcc2
071e :                  brcc1
                                trap            ;branch zero/non zero
                        
0721 : b002             brcc2   bcs brcc3
0723 : 9003                     bcc brcc4
0725 :                  brcc3
                                trap            ;branch carry/no carry
                        
0728 : 1002             brcc4   bpl brcc5
072a : 3003                     bmi brcc6
072c :                  brcc5
                                trap            ;branch minus/plus
                        
072f : 5002             brcc6   bvc brcc7
0731 : 7003                     bvs brcc8
0733 :                  brcc7
                                trap            ;branch overflow/no overflow
                        
0736 :                  brcc8
                                set_stat $ff-minus
                        
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   25
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

073a : d002                     bne brpl1
073c : f003                     beq brpl2
073e :                  brpl1
                                trap            ;branch zero/non zero
                        
0741 : 9002             brpl2   bcc brpl3
0743 : b003                     bcs brpl4
0745 :                  brpl3
                                trap            ;branch carry/no carry
                        
0748 : 3002             brpl4   bmi brpl5
074a : 1003                     bpl brpl6
074c :                  brpl5
                                trap            ;branch minus/plus
                        
074f : 5002             brpl6   bvc brpl7
0751 : 7003                     bvs brpl8
0753 :                  brpl7
                                trap            ;branch overflow/no overflow
                        
0756 :                  brpl8
                                set_stat $ff-overfl
                        
075a : d002                     bne brvc1
075c : f003                     beq brvc2
075e :                  brvc1
                                trap            ;branch zero/non zero
                        
0761 : 9002             brvc2   bcc brvc3
0763 : b003                     bcs brvc4
0765 :                  brvc3
                                trap            ;branch carry/no carry
                        
0768 : 1002             brvc4   bpl brvc5
076a : 3003                     bmi brvc6
076c :                  brvc5
                                trap            ;branch minus/plus
                        
076f : 7002             brvc6   bvs brvc7
0771 : 5003                     bvc brvc8
0773 :                  brvc7
                                trap            ;branch overflow/no overflow
                        
0776 :                  brvc8
                                next_test
                        
                        
                        ; test PHA does not alter flags or accumulator but PLA does
0782 : a255                     ldx #$55        ;x & y protected
0784 : a0aa                     ldy #$aa
                                set_a 1,$ff     ;push
                        
078c : 48                       pha
                                tst_a 1,$ff
                        
                                set_a 0,0
                        
079f : 48                       pha
                                tst_a 0,0
                        
                                set_a $ff,$ff
                        
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   26
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

07b2 : 48                       pha
                                tst_a $ff,$ff
                        
                                set_a 1,0
                        
07c5 : 48                       pha
                                tst_a 1,0
                        
                                set_a 0,$ff
                        
07d8 : 48                       pha
                                tst_a 0,$ff
                        
                                set_a $ff,0
                        
07eb : 48                       pha
                                tst_a $ff,0
                        
                                set_a 0,$ff     ;pull
                        
07fe : 68                       pla
                                tst_a $ff,$ff-zero
                        
                                set_a $ff,0
                        
0811 : 68                       pla
                                tst_a 0,zero
                        
                                set_a $fe,$ff
                        
0824 : 68                       pla
                                tst_a 1,$ff-zero-minus
                        
                                set_a 0,0
                        
0837 : 68                       pla
                                tst_a $ff,minus
                        
                                set_a $ff,$ff
                        
084a : 68                       pla
                                tst_a 0,$ff-minus
                        
                                set_a $fe,0
                        
085d : 68                       pla
                                tst_a 1,0
                        
086a : e055                     cpx #$55        ;x & y unchanged?
                                trap_ne
                        
086e : c0aa                     cpy #$aa
                                trap_ne
                        
                                next_test
                        
                        
                        ; partial pretest EOR #
                                set_a $3c,0
                        
0884 : 49c3                     eor #$c3
                                tst_a $ff,fn
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   27
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                        
                                set_a $c3,0
                        
0898 : 49c3                     eor #$c3
                                tst_a 0,fz
                        
                                next_test
                        
                        
                        ; PC modifying instructions except branches (NOP, JMP, JSR, RTS, BRK, RTI)
                        ; testing NOP
08b2 : a224                     ldx #$24
08b4 : a042                     ldy #$42
                                set_a $18,0
                        
08bc : ea                       nop
                                tst_a $18,0
                        
08c9 : e024                     cpx #$24
                                trap_ne
                        
08cd : c042                     cpy #$42
                                trap_ne
                        
08d1 : a2db                     ldx #$db
08d3 : a0bd                     ldy #$bd
                                set_a $e7,$ff
                        
08db : ea                       nop
                                tst_a $e7,$ff
                        
08e8 : e0db                     cpx #$db
                                trap_ne
                        
08ec : c0bd                     cpy #$bd
                                trap_ne
                        
                                next_test
                        
                        
                        ; jump absolute
                                set_stat $0
                        
0900 : a946                     lda #'F'
0902 : a241                     ldx #'A'
0904 : a052                     ldy #'R'        ;N=0, V=0, Z=0, C=0
0906 : 4cc034                   jmp test_far
0909 : ea                       nop
090a : ea                       nop
                                trap_ne         ;runover protection
                        
090d : e8                       inx
090e : e8                       inx
090f :                  far_ret
                                trap_eq         ;returned flags OK?
                        
                                trap_pl
                        
                                trap_cc
                        
                                trap_vc
                        
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   28
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

0917 : c9ec                     cmp #('F'^$aa)  ;returned registers OK?
                                trap_ne
                        
091b : e042                     cpx #('A'+1)
                                trap_ne
                        
091f : c04f                     cpy #('R'-3)
                                trap_ne
                        
0923 : ca                       dex
0924 : c8                       iny
0925 : c8                       iny
0926 : c8                       iny
0927 : 49aa                     eor #$aa        ;N=0, V=1, Z=0, C=1
0929 : 4c3209                   jmp test_near
092c : ea                       nop
092d : ea                       nop
                                trap_ne         ;runover protection
                        
0930 : e8                       inx
0931 : e8                       inx
0932 :                  test_near
                                trap_eq         ;passed flags OK?
                        
                                trap_mi
                        
                                trap_cc
                        
                                trap_vc
                        
093a : c946                     cmp #'F'        ;passed registers OK?
                                trap_ne
                        
093e : e041                     cpx #'A'
                                trap_ne
                        
0942 : c052                     cpy #'R'
                                trap_ne
                        
                                next_test
                        
                        
                        ; jump indirect
                                set_stat 0
                        
0956 : a949                     lda #'I'
0958 : a24e                     ldx #'N'
095a : a044                     ldy #'D'        ;N=0, V=0, Z=0, C=0
095c : 6cee34                   jmp (ptr_tst_ind)
095f : ea                       nop
                                trap_ne         ;runover protection
                        
0962 : 88                       dey
0963 : 88                       dey
0964 :                  ind_ret
0964 : 08                       php             ;either SP or Y count will fail, if we do not hit
0965 : 88                       dey
0966 : 88                       dey
0967 : 88                       dey
0968 : 28                       plp
                                trap_eq         ;returned flags OK?
                        
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   29
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                                trap_pl
                        
                                trap_cc
                        
                                trap_vc
                        
0971 : c9e3                     cmp #('I'^$aa)  ;returned registers OK?
                                trap_ne
                        
0975 : e04f                     cpx #('N'+1)
                                trap_ne
                        
0979 : c03e                     cpy #('D'-6)
                                trap_ne
                        
097d : ba                       tsx             ;SP check
097e : e0ff                     cpx #$ff
                                trap_ne
                        
                                next_test
                        
                        
                        ; jump subroutine & return from subroutine
                                set_stat 0
                        
0992 : a94a                     lda #'J'
0994 : a253                     ldx #'S'
0996 : a052                     ldy #'R'        ;N=0, V=0, Z=0, C=0
0998 : 202d35                   jsr test_jsr
099a =                  jsr_ret = *-1           ;last address of jsr = return address
099b : 08                       php             ;either SP or Y count will fail, if we do not hit
099c : 88                       dey
099d : 88                       dey
099e : 88                       dey
099f : 28                       plp
                                trap_eq         ;returned flags OK?
                        
                                trap_pl
                        
                                trap_cc
                        
                                trap_vc
                        
09a8 : c9e0                     cmp #('J'^$aa)  ;returned registers OK?
                                trap_ne
                        
09ac : e054                     cpx #('S'+1)
                                trap_ne
                        
09b0 : c04c                     cpy #('R'-6)
                                trap_ne
                        
09b4 : ba                       tsx             ;sp?
09b5 : e0ff                     cpx #$ff
                                trap_ne
                        
                                next_test
                        
                        
                        ; break & return from interrupt
                            if ROM_vectors = 1
                                load_flag 0     ;with interrupts enabled if allowed!
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   30
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                        
09c7 : 48                       pha
09c8 : a942                     lda #'B'
09ca : a252                     ldx #'R'
09cc : a04b                     ldy #'K'
09ce : 28                       plp             ;N=0, V=0, Z=0, C=0
09cf : 00                       brk
                            else
                                lda #hi brk_ret0 ;emulated break
                                pha
                                lda #lo brk_ret0
                                pha
                                load_flag fao    ;set break & unused on stack
                                pha
                                load_flag intdis ;during interrupt
                                pha
                                lda #'B'
                                ldx #'R'
                                ldy #'K'
                                plp             ;N=0, V=0, Z=0, C=0
                                jmp irq_trap
                            endif
09d0 : 88                       dey             ;should not be executed
09d1 :                  brk_ret0                ;address of break return
09d1 : 08                       php             ;either SP or Y count will fail, if we do not hit
09d2 : 88                       dey
09d3 : 88                       dey
09d4 : 88                       dey
09d5 : c9e8                     cmp #'B'^$aa    ;returned registers OK?
                                ;the IRQ vector was never executed if A & X stay unmodified
                                trap_ne
                        
09d9 : e053                     cpx #'R'+1
                                trap_ne
                        
09dd : c045                     cpy #'K'-6
                                trap_ne
                        
09e1 : 68                       pla             ;returned flags OK (unchanged)?
                                cmp_flag 0
                        
                                trap_ne
                        
09e6 : ba                       tsx             ;sp?
09e7 : e0ff                     cpx #$ff
                                trap_ne
                        
                            if ROM_vectors = 1
                                load_flag $ff   ;with interrupts disabled if allowed!
                        
09ed : 48                       pha
09ee : a9bd                     lda #$ff-'B'
09f0 : a2ad                     ldx #$ff-'R'
09f2 : a0b4                     ldy #$ff-'K'
09f4 : 28                       plp             ;N=1, V=1, Z=1, C=1
09f5 : 00                       brk
                            else
                                lda #hi brk_ret1 ;emulated break
                                pha
                                lda #lo brk_ret1
                                pha
                                load_flag $ff
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   31
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                                pha             ;set break & unused on stack
                                pha             ;actual flags
                                lda #$ff-'B'
                                ldx #$ff-'R'
                                ldy #$ff-'K'
                                plp             ;N=1, V=1, Z=1, C=1
                                jmp irq_trap
                            endif
09f6 : 88                       dey             ;should not be executed
09f7 :                  brk_ret1                ;address of break return
09f7 : 08                       php             ;either SP or Y count will fail, if we do not hit
09f8 : 88                       dey
09f9 : 88                       dey
09fa : 88                       dey
09fb : c917                     cmp #($ff-'B')^$aa  ;returned registers OK?
                                ;the IRQ vector was never executed if A & X stay unmodified
                                trap_ne
                        
09ff : e0ae                     cpx #$ff-'R'+1
                                trap_ne
                        
0a03 : c0ae                     cpy #$ff-'K'-6
                                trap_ne
                        
0a07 : 68                       pla             ;returned flags OK (unchanged)?
                                cmp_flag $ff
                        
                                trap_ne
                        
0a0c : ba                       tsx             ;sp?
0a0d : e0ff                     cpx #$ff
                                trap_ne
                        
                                next_test
                        
                        
                        ; test set and clear flags CLC CLI CLD CLV SEC SEI SED
                                set_stat $ff
                        
0a21 : 18                       clc
                                tst_stat $ff-carry
                        
0a2a : 38                       sec
                                tst_stat $ff
                        
                            if I_flag = 3
0a33 : 58                       cli
                                tst_stat $ff-intdis
                        
0a3c : 78                       sei
                                tst_stat $ff
                        
                            endif
0a45 : d8                       cld
                                tst_stat $ff-decmode
                        
0a4e : f8                       sed
                                tst_stat $ff
                        
0a57 : b8                       clv
                                tst_stat $ff-overfl
                        
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   32
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                                set_stat 0
                        
                                tst_stat 0
                        
0a6c : 38                       sec
                                tst_stat carry
                        
0a75 : 18                       clc
                                tst_stat 0
                        
                            if I_flag = 3
0a7e : 78                       sei
                                tst_stat intdis
                        
0a87 : 58                       cli
                                tst_stat 0
                        
                            endif
0a90 : f8                       sed
                                tst_stat decmode
                        
0a99 : d8                       cld
                                tst_stat 0
                        
                                set_stat overfl
                        
                                tst_stat overfl
                        
0aae : b8                       clv
                                tst_stat 0
                        
                                next_test
                        
                        ; testing index register increment/decrement and transfer
                        ; INX INY DEX DEY TAX TXA TAY TYA
0ac3 : a2fe                     ldx #$fe
                                set_stat $ff
                        
0ac9 : e8                       inx             ;ff
                                tst_x $ff,$ff-zero
                        
0ad6 : e8                       inx             ;00
                                tst_x 0,$ff-minus
                        
0ae3 : e8                       inx             ;01
                                tst_x 1,$ff-minus-zero
                        
0af0 : ca                       dex             ;00
                                tst_x 0,$ff-minus
                        
0afd : ca                       dex             ;ff
                                tst_x $ff,$ff-zero
                        
0b0a : ca                       dex             ;fe
                                set_stat 0
                        
0b0f : e8                       inx             ;ff
                                tst_x $ff,minus
                        
0b1c : e8                       inx             ;00
                                tst_x 0,zero
                        
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   33
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

0b29 : e8                       inx             ;01
                                tst_x 1,0
                        
0b36 : ca                       dex             ;00
                                tst_x 0,zero
                        
0b43 : ca                       dex             ;ff
                                tst_x $ff,minus
                        
                        
0b50 : a0fe                     ldy #$fe
                                set_stat $ff
                        
0b56 : c8                       iny             ;ff
                                tst_y $ff,$ff-zero
                        
0b63 : c8                       iny             ;00
                                tst_y 0,$ff-minus
                        
0b70 : c8                       iny             ;01
                                tst_y 1,$ff-minus-zero
                        
0b7d : 88                       dey             ;00
                                tst_y 0,$ff-minus
                        
0b8a : 88                       dey             ;ff
                                tst_y $ff,$ff-zero
                        
0b97 : 88                       dey             ;fe
                                set_stat 0
                        
0b9c : c8                       iny             ;ff
                                tst_y $ff,0+minus
                        
0ba9 : c8                       iny             ;00
                                tst_y 0,zero
                        
0bb6 : c8                       iny             ;01
                                tst_y 1,0
                        
0bc3 : 88                       dey             ;00
                                tst_y 0,zero
                        
0bd0 : 88                       dey             ;ff
                                tst_y $ff,minus
                        
                        
0bdd : a2ff                     ldx #$ff
                                set_stat $ff
                        
0be3 : 8a                       txa
                                tst_a $ff,$ff-zero
                        
0bf0 : 08                       php
0bf1 : e8                       inx             ;00
0bf2 : 28                       plp
0bf3 : 8a                       txa
                                tst_a 0,$ff-minus
                        
0c00 : 08                       php
0c01 : e8                       inx             ;01
0c02 : 28                       plp
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   34
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

0c03 : 8a                       txa
                                tst_a 1,$ff-minus-zero
                        
                                set_stat 0
                        
0c14 : 8a                       txa
                                tst_a 1,0
                        
0c21 : 08                       php
0c22 : ca                       dex             ;00
0c23 : 28                       plp
0c24 : 8a                       txa
                                tst_a 0,zero
                        
0c31 : 08                       php
0c32 : ca                       dex             ;ff
0c33 : 28                       plp
0c34 : 8a                       txa
                                tst_a $ff,minus
                        
                        
0c41 : a0ff                     ldy #$ff
                                set_stat $ff
                        
0c47 : 98                       tya
                                tst_a $ff,$ff-zero
                        
0c54 : 08                       php
0c55 : c8                       iny             ;00
0c56 : 28                       plp
0c57 : 98                       tya
                                tst_a 0,$ff-minus
                        
0c64 : 08                       php
0c65 : c8                       iny             ;01
0c66 : 28                       plp
0c67 : 98                       tya
                                tst_a 1,$ff-minus-zero
                        
                                set_stat 0
                        
0c78 : 98                       tya
                                tst_a 1,0
                        
0c85 : 08                       php
0c86 : 88                       dey             ;00
0c87 : 28                       plp
0c88 : 98                       tya
                                tst_a 0,zero
                        
0c95 : 08                       php
0c96 : 88                       dey             ;ff
0c97 : 28                       plp
0c98 : 98                       tya
                                tst_a $ff,minus
                        
                        
                                load_flag $ff
                        
0ca7 : 48                       pha
0ca8 : a2ff                     ldx #$ff        ;ff
0caa : 8a                       txa
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   35
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

0cab : 28                       plp
0cac : a8                       tay
                                tst_y $ff,$ff-zero
                        
0cb9 : 08                       php
0cba : e8                       inx             ;00
0cbb : 8a                       txa
0cbc : 28                       plp
0cbd : a8                       tay
                                tst_y 0,$ff-minus
                        
0cca : 08                       php
0ccb : e8                       inx             ;01
0ccc : 8a                       txa
0ccd : 28                       plp
0cce : a8                       tay
                                tst_y 1,$ff-minus-zero
                        
                                load_flag 0
                        
0cdd : 48                       pha
0cde : a900                     lda #0
0ce0 : 8a                       txa
0ce1 : 28                       plp
0ce2 : a8                       tay
                                tst_y 1,0
                        
0cef : 08                       php
0cf0 : ca                       dex             ;00
0cf1 : 8a                       txa
0cf2 : 28                       plp
0cf3 : a8                       tay
                                tst_y 0,zero
                        
0d00 : 08                       php
0d01 : ca                       dex             ;ff
0d02 : 8a                       txa
0d03 : 28                       plp
0d04 : a8                       tay
                                tst_y $ff,minus
                        
                        
                        
                                load_flag $ff
                        
0d13 : 48                       pha
0d14 : a0ff                     ldy #$ff        ;ff
0d16 : 98                       tya
0d17 : 28                       plp
0d18 : aa                       tax
                                tst_x $ff,$ff-zero
                        
0d25 : 08                       php
0d26 : c8                       iny             ;00
0d27 : 98                       tya
0d28 : 28                       plp
0d29 : aa                       tax
                                tst_x 0,$ff-minus
                        
0d36 : 08                       php
0d37 : c8                       iny             ;01
0d38 : 98                       tya
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   36
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

0d39 : 28                       plp
0d3a : aa                       tax
                                tst_x 1,$ff-minus-zero
                        
                                load_flag 0
                        
0d49 : 48                       pha
0d4a : a900                     lda #0          ;preset status
0d4c : 98                       tya
0d4d : 28                       plp
0d4e : aa                       tax
                                tst_x 1,0
                        
0d5b : 08                       php
0d5c : 88                       dey             ;00
0d5d : 98                       tya
0d5e : 28                       plp
0d5f : aa                       tax
                                tst_x 0,zero
                        
0d6c : 08                       php
0d6d : 88                       dey             ;ff
0d6e : 98                       tya
0d6f : 28                       plp
0d70 : aa                       tax
                                tst_x $ff,minus
                        
                                next_test
                        
                        
                        ;TSX sets NZ - TXS does not
                        ;  This section also tests for proper stack wrap around.
0d89 : a201                     ldx #1          ;01
                                set_stat $ff
                        
0d8f : 9a                       txs
0d90 : 08                       php
0d91 : ad0101                   lda $101
                                cmp_flag $ff
                        
                                trap_ne
                        
                                set_stat 0
                        
0d9c : 9a                       txs
0d9d : 08                       php
0d9e : ad0101                   lda $101
                                cmp_flag 0
                        
                                trap_ne
                        
0da5 : ca                       dex             ;00
                                set_stat $ff
                        
0daa : 9a                       txs
0dab : 08                       php
0dac : ad0001                   lda $100
                                cmp_flag $ff
                        
                                trap_ne
                        
                                set_stat 0
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   37
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                        
0db7 : 9a                       txs
0db8 : 08                       php
0db9 : ad0001                   lda $100
                                cmp_flag 0
                        
                                trap_ne
                        
0dc0 : ca                       dex             ;ff
                                set_stat $ff
                        
0dc5 : 9a                       txs
0dc6 : 08                       php
0dc7 : adff01                   lda $1ff
                                cmp_flag $ff
                        
                                trap_ne
                        
                                set_stat 0
                        
0dd2 : 9a                       txs
0dd3 : 08                       php
0dd4 : adff01                   lda $1ff
                                cmp_flag 0
                        
                        
0dd9 : a201                     ldx #1
0ddb : 9a                       txs             ;sp=01
                                set_stat $ff
                        
0de0 : ba                       tsx             ;clears Z, N
0de1 : 08                       php             ;sp=00
0de2 : e001                     cpx #1
                                trap_ne
                        
0de6 : ad0101                   lda $101
                                cmp_flag $ff-minus-zero
                        
                                trap_ne
                        
                                set_stat $ff
                        
0df1 : ba                       tsx             ;clears N, sets Z
0df2 : 08                       php             ;sp=ff
0df3 : e000                     cpx #0
                                trap_ne
                        
0df7 : ad0001                   lda $100
                                cmp_flag $ff-minus
                        
                                trap_ne
                        
                                set_stat $ff
                        
0e02 : ba                       tsx             ;clears N, sets Z
0e03 : 08                       php             ;sp=fe
0e04 : e0ff                     cpx #$ff
                                trap_ne
                        
0e08 : adff01                   lda $1ff
                                cmp_flag $ff-zero
                        
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   38
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                                trap_ne
                        
                        
0e0f : a201                     ldx #1
0e11 : 9a                       txs             ;sp=01
                                set_stat 0
                        
0e16 : ba                       tsx             ;clears Z, N
0e17 : 08                       php             ;sp=00
0e18 : e001                     cpx #1
                                trap_ne
                        
0e1c : ad0101                   lda $101
                                cmp_flag 0
                        
                                trap_ne
                        
                                set_stat 0
                        
0e27 : ba                       tsx             ;clears N, sets Z
0e28 : 08                       php             ;sp=ff
0e29 : e000                     cpx #0
                                trap_ne
                        
0e2d : ad0001                   lda $100
                                cmp_flag zero
                        
                                trap_ne
                        
                                set_stat 0
                        
0e38 : ba                       tsx             ;clears N, sets Z
0e39 : 08                       php             ;sp=fe
0e3a : e0ff                     cpx #$ff
                                trap_ne
                        
0e3e : adff01                   lda $1ff
                                cmp_flag minus
                        
                                trap_ne
                        
0e45 : 68                       pla             ;sp=ff
                                next_test
                        
                        
                        ; testing index register load & store LDY LDX STY STX all addressing modes
                        ; LDX / STX - zp,y / abs,y
0e52 : a003                     ldy #3
0e54 :                  tldx
                                set_stat 0
                        
0e58 : b615                     ldx zp1,y
0e5a : 08                       php         ;test stores do not alter flags
0e5b : 8a                       txa
0e5c : 49c3                     eor #$c3
0e5e : 28                       plp
0e5f : 990302                   sta abst,y
0e62 : 08                       php         ;flags after load/store sequence
0e63 : 49c3                     eor #$c3
0e65 : d91802                   cmp abs1,y  ;test result
                                trap_ne
                        
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   39
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

0e6a : 68                       pla         ;load status
                                eor_flag 0
                        
0e6d : d91d02                   cmp fLDx,y  ;test flags
                                trap_ne
                        
0e72 : 88                       dey
0e73 : 10df                     bpl tldx
                        
0e75 : a003                     ldy #3
0e77 :                  tldx1
                                set_stat $ff
                        
0e7b : b615                     ldx zp1,y
0e7d : 08                       php         ;test stores do not alter flags
0e7e : 8a                       txa
0e7f : 49c3                     eor #$c3
0e81 : 28                       plp
0e82 : 990302                   sta abst,y
0e85 : 08                       php         ;flags after load/store sequence
0e86 : 49c3                     eor #$c3
0e88 : d91802                   cmp abs1,y  ;test result
                                trap_ne
                        
0e8d : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
                        
0e90 : d91d02                   cmp fLDx,y  ;test flags
                                trap_ne
                        
0e95 : 88                       dey
0e96 : 10df                     bpl tldx1
                        
0e98 : a003                     ldy #3
0e9a :                  tldx2
                                set_stat 0
                        
0e9e : be1802                   ldx abs1,y
0ea1 : 08                       php         ;test stores do not alter flags
0ea2 : 8a                       txa
0ea3 : 49c3                     eor #$c3
0ea5 : aa                       tax
0ea6 : 28                       plp
0ea7 : 960c                     stx zpt,y
0ea9 : 08                       php         ;flags after load/store sequence
0eaa : 49c3                     eor #$c3
0eac : d91500                   cmp zp1,y   ;test result
                                trap_ne
                        
0eb1 : 68                       pla         ;load status
                                eor_flag 0
                        
0eb4 : d91d02                   cmp fLDx,y  ;test flags
                                trap_ne
                        
0eb9 : 88                       dey
0eba : 10de                     bpl tldx2
                        
0ebc : a003                     ldy #3
0ebe :                  tldx3
                                set_stat $ff
                        
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   40
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

0ec2 : be1802                   ldx abs1,y
0ec5 : 08                       php         ;test stores do not alter flags
0ec6 : 8a                       txa
0ec7 : 49c3                     eor #$c3
0ec9 : aa                       tax
0eca : 28                       plp
0ecb : 960c                     stx zpt,y
0ecd : 08                       php         ;flags after load/store sequence
0ece : 49c3                     eor #$c3
0ed0 : d91500                   cmp zp1,y   ;test result
                                trap_ne
                        
0ed5 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
                        
0ed8 : d91d02                   cmp fLDx,y  ;test flags
                                trap_ne
                        
0edd : 88                       dey
0ede : 10de                     bpl tldx3
                        
0ee0 : a003                     ldy #3      ;testing store result
0ee2 : a200                     ldx #0
0ee4 : b90c00           tstx    lda zpt,y
0ee7 : 49c3                     eor #$c3
0ee9 : d91500                   cmp zp1,y
                                trap_ne     ;store to zp data
                        
0eee : 960c                     stx zpt,y   ;clear
0ef0 : b90302                   lda abst,y
0ef3 : 49c3                     eor #$c3
0ef5 : d91802                   cmp abs1,y
                                trap_ne     ;store to abs data
                        
0efa : 8a                       txa
0efb : 990302                   sta abst,y  ;clear
0efe : 88                       dey
0eff : 10e3                     bpl tstx
                                next_test
                        
                        
                        ; indexed wraparound test (only zp should wrap)
0f0d : a0fd                     ldy #3+$fa
0f0f : b61b             tldx4   ldx zp1-$fa&$ff,y   ;wrap on indexed zp
0f11 : 8a                       txa
0f12 : 990901                   sta abst-$fa,y      ;no STX abs,y!
0f15 : 88                       dey
0f16 : c0fa                     cpy #$fa
0f18 : b0f5                     bcs tldx4
0f1a : a0fd                     ldy #3+$fa
0f1c : be1e01           tldx5   ldx abs1-$fa,y      ;no wrap on indexed abs
0f1f : 9612                     stx zpt-$fa&$ff,y
0f21 : 88                       dey
0f22 : c0fa                     cpy #$fa
0f24 : b0f6                     bcs tldx5
0f26 : a003                     ldy #3      ;testing wraparound result
0f28 : a200                     ldx #0
0f2a : b90c00           tstx1   lda zpt,y
0f2d : d91500                   cmp zp1,y
                                trap_ne     ;store to zp data
                        
0f32 : 960c                     stx zpt,y   ;clear
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   41
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

0f34 : b90302                   lda abst,y
0f37 : d91802                   cmp abs1,y
                                trap_ne     ;store to abs data
                        
0f3c : 8a                       txa
0f3d : 990302                   sta abst,y  ;clear
0f40 : 88                       dey
0f41 : 10e7                     bpl tstx1
                                next_test
                        
                        
                        ; LDY / STY - zp,x / abs,x
0f4f : a203                     ldx #3
0f51 :                  tldy
                                set_stat 0
                        
0f55 : b415                     ldy zp1,x
0f57 : 08                       php         ;test stores do not alter flags
0f58 : 98                       tya
0f59 : 49c3                     eor #$c3
0f5b : 28                       plp
0f5c : 9d0302                   sta abst,x
0f5f : 08                       php         ;flags after load/store sequence
0f60 : 49c3                     eor #$c3
0f62 : dd1802                   cmp abs1,x  ;test result
                                trap_ne
                        
0f67 : 68                       pla         ;load status
                                eor_flag 0
                        
0f6a : dd1d02                   cmp fLDx,x  ;test flags
                                trap_ne
                        
0f6f : ca                       dex
0f70 : 10df                     bpl tldy
                        
0f72 : a203                     ldx #3
0f74 :                  tldy1
                                set_stat $ff
                        
0f78 : b415                     ldy zp1,x
0f7a : 08                       php         ;test stores do not alter flags
0f7b : 98                       tya
0f7c : 49c3                     eor #$c3
0f7e : 28                       plp
0f7f : 9d0302                   sta abst,x
0f82 : 08                       php         ;flags after load/store sequence
0f83 : 49c3                     eor #$c3
0f85 : dd1802                   cmp abs1,x  ;test result
                                trap_ne
                        
0f8a : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
                        
0f8d : dd1d02                   cmp fLDx,x  ;test flags
                                trap_ne
                        
0f92 : ca                       dex
0f93 : 10df                     bpl tldy1
                        
0f95 : a203                     ldx #3
0f97 :                  tldy2
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   42
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                                set_stat 0
                        
0f9b : bc1802                   ldy abs1,x
0f9e : 08                       php         ;test stores do not alter flags
0f9f : 98                       tya
0fa0 : 49c3                     eor #$c3
0fa2 : a8                       tay
0fa3 : 28                       plp
0fa4 : 940c                     sty zpt,x
0fa6 : 08                       php         ;flags after load/store sequence
0fa7 : 49c3                     eor #$c3
0fa9 : d515                     cmp zp1,x   ;test result
                                trap_ne
                        
0fad : 68                       pla         ;load status
                                eor_flag 0
                        
0fb0 : dd1d02                   cmp fLDx,x  ;test flags
                                trap_ne
                        
0fb5 : ca                       dex
0fb6 : 10df                     bpl tldy2
                        
0fb8 : a203                     ldx #3
0fba :                  tldy3
                                set_stat $ff
                        
0fbe : bc1802                   ldy abs1,x
0fc1 : 08                       php         ;test stores do not alter flags
0fc2 : 98                       tya
0fc3 : 49c3                     eor #$c3
0fc5 : a8                       tay
0fc6 : 28                       plp
0fc7 : 940c                     sty zpt,x
0fc9 : 08                       php         ;flags after load/store sequence
0fca : 49c3                     eor #$c3
0fcc : d515                     cmp zp1,x   ;test result
                                trap_ne
                        
0fd0 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
                        
0fd3 : dd1d02                   cmp fLDx,x  ;test flags
                                trap_ne
                        
0fd8 : ca                       dex
0fd9 : 10df                     bpl tldy3
                        
0fdb : a203                     ldx #3      ;testing store result
0fdd : a000                     ldy #0
0fdf : b50c             tsty    lda zpt,x
0fe1 : 49c3                     eor #$c3
0fe3 : d515                     cmp zp1,x
                                trap_ne     ;store to zp,x data
                        
0fe7 : 940c                     sty zpt,x   ;clear
0fe9 : bd0302                   lda abst,x
0fec : 49c3                     eor #$c3
0fee : dd1802                   cmp abs1,x
                                trap_ne     ;store to abs,x data
                        
0ff3 : 8a                       txa
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   43
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

0ff4 : 9d0302                   sta abst,x  ;clear
0ff7 : ca                       dex
0ff8 : 10e5                     bpl tsty
                                next_test
                        
                        
                        ; indexed wraparound test (only zp should wrap)
1006 : a2fd                     ldx #3+$fa
1008 : b41b             tldy4   ldy zp1-$fa&$ff,x   ;wrap on indexed zp
100a : 98                       tya
100b : 9d0901                   sta abst-$fa,x      ;no STX abs,x!
100e : ca                       dex
100f : e0fa                     cpx #$fa
1011 : b0f5                     bcs tldy4
1013 : a2fd                     ldx #3+$fa
1015 : bc1e01           tldy5   ldy abs1-$fa,x      ;no wrap on indexed abs
1018 : 9412                     sty zpt-$fa&$ff,x
101a : ca                       dex
101b : e0fa                     cpx #$fa
101d : b0f6                     bcs tldy5
101f : a203                     ldx #3      ;testing wraparound result
1021 : a000                     ldy #0
1023 : b50c             tsty1   lda zpt,x
1025 : d515                     cmp zp1,x
                                trap_ne     ;store to zp,x data
                        
1029 : 940c                     sty zpt,x   ;clear
102b : bd0302                   lda abst,x
102e : dd1802                   cmp abs1,x
                                trap_ne     ;store to abs,x data
                        
1033 : 8a                       txa
1034 : 9d0302                   sta abst,x  ;clear
1037 : ca                       dex
1038 : 10e9                     bpl tsty1
                                next_test
                        
                        
                        ; LDX / STX - zp / abs / #
                                set_stat 0
                        
104a : a615                     ldx zp1
104c : 08                       php         ;test stores do not alter flags
104d : 8a                       txa
104e : 49c3                     eor #$c3
1050 : aa                       tax
1051 : 28                       plp
1052 : 8e0302                   stx abst
1055 : 08                       php         ;flags after load/store sequence
1056 : 49c3                     eor #$c3
1058 : aa                       tax
1059 : e0c3                     cpx #$c3    ;test result
                                trap_ne
                        
105d : 68                       pla         ;load status
                                eor_flag 0
                        
1060 : cd1d02                   cmp fLDx    ;test flags
                                trap_ne
                        
                                set_stat 0
                        
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   44
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

1069 : a616                     ldx zp1+1
106b : 08                       php         ;test stores do not alter flags
106c : 8a                       txa
106d : 49c3                     eor #$c3
106f : aa                       tax
1070 : 28                       plp
1071 : 8e0402                   stx abst+1
1074 : 08                       php         ;flags after load/store sequence
1075 : 49c3                     eor #$c3
1077 : aa                       tax
1078 : e082                     cpx #$82    ;test result
                                trap_ne
                        
107c : 68                       pla         ;load status
                                eor_flag 0
                        
107f : cd1e02                   cmp fLDx+1  ;test flags
                                trap_ne
                        
                                set_stat 0
                        
1088 : a617                     ldx zp1+2
108a : 08                       php         ;test stores do not alter flags
108b : 8a                       txa
108c : 49c3                     eor #$c3
108e : aa                       tax
108f : 28                       plp
1090 : 8e0502                   stx abst+2
1093 : 08                       php         ;flags after load/store sequence
1094 : 49c3                     eor #$c3
1096 : aa                       tax
1097 : e041                     cpx #$41    ;test result
                                trap_ne
                        
109b : 68                       pla         ;load status
                                eor_flag 0
                        
109e : cd1f02                   cmp fLDx+2  ;test flags
                                trap_ne
                        
                                set_stat 0
                        
10a7 : a618                     ldx zp1+3
10a9 : 08                       php         ;test stores do not alter flags
10aa : 8a                       txa
10ab : 49c3                     eor #$c3
10ad : aa                       tax
10ae : 28                       plp
10af : 8e0602                   stx abst+3
10b2 : 08                       php         ;flags after load/store sequence
10b3 : 49c3                     eor #$c3
10b5 : aa                       tax
10b6 : e000                     cpx #0      ;test result
                                trap_ne
                        
10ba : 68                       pla         ;load status
                                eor_flag 0
                        
10bd : cd2002                   cmp fLDx+3  ;test flags
                                trap_ne
                        
                        
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   45
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                                set_stat $ff
                        
10c6 : a615                     ldx zp1
10c8 : 08                       php         ;test stores do not alter flags
10c9 : 8a                       txa
10ca : 49c3                     eor #$c3
10cc : aa                       tax
10cd : 28                       plp
10ce : 8e0302                   stx abst
10d1 : 08                       php         ;flags after load/store sequence
10d2 : 49c3                     eor #$c3
10d4 : aa                       tax
10d5 : e0c3                     cpx #$c3    ;test result
                                trap_ne     ;
                        
10d9 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
                        
10dc : cd1d02                   cmp fLDx    ;test flags
                                trap_ne
                        
                                set_stat $ff
                        
10e5 : a616                     ldx zp1+1
10e7 : 08                       php         ;test stores do not alter flags
10e8 : 8a                       txa
10e9 : 49c3                     eor #$c3
10eb : aa                       tax
10ec : 28                       plp
10ed : 8e0402                   stx abst+1
10f0 : 08                       php         ;flags after load/store sequence
10f1 : 49c3                     eor #$c3
10f3 : aa                       tax
10f4 : e082                     cpx #$82    ;test result
                                trap_ne
                        
10f8 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
                        
10fb : cd1e02                   cmp fLDx+1  ;test flags
                                trap_ne
                        
                                set_stat $ff
                        
1104 : a617                     ldx zp1+2
1106 : 08                       php         ;test stores do not alter flags
1107 : 8a                       txa
1108 : 49c3                     eor #$c3
110a : aa                       tax
110b : 28                       plp
110c : 8e0502                   stx abst+2
110f : 08                       php         ;flags after load/store sequence
1110 : 49c3                     eor #$c3
1112 : aa                       tax
1113 : e041                     cpx #$41    ;test result
                                trap_ne     ;
                        
1117 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
                        
111a : cd1f02                   cmp fLDx+2  ;test flags
                                trap_ne
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   46
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                        
                                set_stat $ff
                        
1123 : a618                     ldx zp1+3
1125 : 08                       php         ;test stores do not alter flags
1126 : 8a                       txa
1127 : 49c3                     eor #$c3
1129 : aa                       tax
112a : 28                       plp
112b : 8e0602                   stx abst+3
112e : 08                       php         ;flags after load/store sequence
112f : 49c3                     eor #$c3
1131 : aa                       tax
1132 : e000                     cpx #0      ;test result
                                trap_ne
                        
1136 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
                        
1139 : cd2002                   cmp fLDx+3  ;test flags
                                trap_ne
                        
                        
                                set_stat 0
                        
1142 : ae1802                   ldx abs1
1145 : 08                       php         ;test stores do not alter flags
1146 : 8a                       txa
1147 : 49c3                     eor #$c3
1149 : aa                       tax
114a : 28                       plp
114b : 860c                     stx zpt
114d : 08                       php         ;flags after load/store sequence
114e : 49c3                     eor #$c3
1150 : c515                     cmp zp1     ;test result
                                trap_ne
                        
1154 : 68                       pla         ;load status
                                eor_flag 0
                        
1157 : cd1d02                   cmp fLDx    ;test flags
                                trap_ne
                        
                                set_stat 0
                        
1160 : ae1902                   ldx abs1+1
1163 : 08                       php         ;test stores do not alter flags
1164 : 8a                       txa
1165 : 49c3                     eor #$c3
1167 : aa                       tax
1168 : 28                       plp
1169 : 860d                     stx zpt+1
116b : 08                       php         ;flags after load/store sequence
116c : 49c3                     eor #$c3
116e : c516                     cmp zp1+1   ;test result
                                trap_ne
                        
1172 : 68                       pla         ;load status
                                eor_flag 0
                        
1175 : cd1e02                   cmp fLDx+1  ;test flags
                                trap_ne
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   47
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                        
                                set_stat 0
                        
117e : ae1a02                   ldx abs1+2
1181 : 08                       php         ;test stores do not alter flags
1182 : 8a                       txa
1183 : 49c3                     eor #$c3
1185 : aa                       tax
1186 : 28                       plp
1187 : 860e                     stx zpt+2
1189 : 08                       php         ;flags after load/store sequence
118a : 49c3                     eor #$c3
118c : c517                     cmp zp1+2   ;test result
                                trap_ne
                        
1190 : 68                       pla         ;load status
                                eor_flag 0
                        
1193 : cd1f02                   cmp fLDx+2  ;test flags
                                trap_ne
                        
                                set_stat 0
                        
119c : ae1b02                   ldx abs1+3
119f : 08                       php         ;test stores do not alter flags
11a0 : 8a                       txa
11a1 : 49c3                     eor #$c3
11a3 : aa                       tax
11a4 : 28                       plp
11a5 : 860f                     stx zpt+3
11a7 : 08                       php         ;flags after load/store sequence
11a8 : 49c3                     eor #$c3
11aa : c518                     cmp zp1+3   ;test result
                                trap_ne
                        
11ae : 68                       pla         ;load status
                                eor_flag 0
                        
11b1 : cd2002                   cmp fLDx+3  ;test flags
                                trap_ne
                        
                        
                                set_stat $ff
                        
11ba : ae1802                   ldx abs1
11bd : 08                       php         ;test stores do not alter flags
11be : 8a                       txa
11bf : 49c3                     eor #$c3
11c1 : aa                       tax
11c2 : 28                       plp
11c3 : 860c                     stx zpt
11c5 : 08                       php         ;flags after load/store sequence
11c6 : 49c3                     eor #$c3
11c8 : aa                       tax
11c9 : e415                     cpx zp1     ;test result
                                trap_ne
                        
11cd : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
                        
11d0 : cd1d02                   cmp fLDx    ;test flags
                                trap_ne
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   48
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                        
                                set_stat $ff
                        
11d9 : ae1902                   ldx abs1+1
11dc : 08                       php         ;test stores do not alter flags
11dd : 8a                       txa
11de : 49c3                     eor #$c3
11e0 : aa                       tax
11e1 : 28                       plp
11e2 : 860d                     stx zpt+1
11e4 : 08                       php         ;flags after load/store sequence
11e5 : 49c3                     eor #$c3
11e7 : aa                       tax
11e8 : e416                     cpx zp1+1   ;test result
                                trap_ne
                        
11ec : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
                        
11ef : cd1e02                   cmp fLDx+1  ;test flags
                                trap_ne
                        
                                set_stat $ff
                        
11f8 : ae1a02                   ldx abs1+2
11fb : 08                       php         ;test stores do not alter flags
11fc : 8a                       txa
11fd : 49c3                     eor #$c3
11ff : aa                       tax
1200 : 28                       plp
1201 : 860e                     stx zpt+2
1203 : 08                       php         ;flags after load/store sequence
1204 : 49c3                     eor #$c3
1206 : aa                       tax
1207 : e417                     cpx zp1+2   ;test result
                                trap_ne
                        
120b : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
                        
120e : cd1f02                   cmp fLDx+2  ;test flags
                                trap_ne
                        
                                set_stat $ff
                        
1217 : ae1b02                   ldx abs1+3
121a : 08                       php         ;test stores do not alter flags
121b : 8a                       txa
121c : 49c3                     eor #$c3
121e : aa                       tax
121f : 28                       plp
1220 : 860f                     stx zpt+3
1222 : 08                       php         ;flags after load/store sequence
1223 : 49c3                     eor #$c3
1225 : aa                       tax
1226 : e418                     cpx zp1+3   ;test result
                                trap_ne
                        
122a : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
                        
122d : cd2002                   cmp fLDx+3  ;test flags
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   49
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                                trap_ne
                        
                        
                                set_stat 0
                        
1236 : a2c3                     ldx #$c3
1238 : 08                       php
1239 : ec1802                   cpx abs1    ;test result
                                trap_ne
                        
123e : 68                       pla         ;load status
                                eor_flag 0
                        
1241 : cd1d02                   cmp fLDx    ;test flags
                                trap_ne
                        
                                set_stat 0
                        
124a : a282                     ldx #$82
124c : 08                       php
124d : ec1902                   cpx abs1+1  ;test result
                                trap_ne
                        
1252 : 68                       pla         ;load status
                                eor_flag 0
                        
1255 : cd1e02                   cmp fLDx+1  ;test flags
                                trap_ne
                        
                                set_stat 0
                        
125e : a241                     ldx #$41
1260 : 08                       php
1261 : ec1a02                   cpx abs1+2  ;test result
                                trap_ne
                        
1266 : 68                       pla         ;load status
                                eor_flag 0
                        
1269 : cd1f02                   cmp fLDx+2  ;test flags
                                trap_ne
                        
                                set_stat 0
                        
1272 : a200                     ldx #0
1274 : 08                       php
1275 : ec1b02                   cpx abs1+3  ;test result
                                trap_ne
                        
127a : 68                       pla         ;load status
                                eor_flag 0
                        
127d : cd2002                   cmp fLDx+3  ;test flags
                                trap_ne
                        
                        
                                set_stat $ff
                        
1286 : a2c3                     ldx #$c3
1288 : 08                       php
1289 : ec1802                   cpx abs1    ;test result
                                trap_ne
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   50
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                        
128e : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
                        
1291 : cd1d02                   cmp fLDx    ;test flags
                                trap_ne
                        
                                set_stat $ff
                        
129a : a282                     ldx #$82
129c : 08                       php
129d : ec1902                   cpx abs1+1  ;test result
                                trap_ne
                        
12a2 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
                        
12a5 : cd1e02                   cmp fLDx+1  ;test flags
                                trap_ne
                        
                                set_stat $ff
                        
12ae : a241                     ldx #$41
12b0 : 08                       php
12b1 : ec1a02                   cpx abs1+2  ;test result
                                trap_ne
                        
12b6 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
                        
12b9 : cd1f02                   cmp fLDx+2  ;test flags
                                trap_ne
                        
                                set_stat $ff
                        
12c2 : a200                     ldx #0
12c4 : 08                       php
12c5 : ec1b02                   cpx abs1+3  ;test result
                                trap_ne
                        
12ca : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
                        
12cd : cd2002                   cmp fLDx+3  ;test flags
                                trap_ne
                        
                        
12d2 : a200                     ldx #0
12d4 : a50c                     lda zpt
12d6 : 49c3                     eor #$c3
12d8 : c515                     cmp zp1
                                trap_ne     ;store to zp data
                        
12dc : 860c                     stx zpt     ;clear
12de : ad0302                   lda abst
12e1 : 49c3                     eor #$c3
12e3 : cd1802                   cmp abs1
                                trap_ne     ;store to abs data
                        
12e8 : 8e0302                   stx abst    ;clear
12eb : a50d                     lda zpt+1
12ed : 49c3                     eor #$c3
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   51
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

12ef : c516                     cmp zp1+1
                                trap_ne     ;store to zp data
                        
12f3 : 860d                     stx zpt+1   ;clear
12f5 : ad0402                   lda abst+1
12f8 : 49c3                     eor #$c3
12fa : cd1902                   cmp abs1+1
                                trap_ne     ;store to abs data
                        
12ff : 8e0402                   stx abst+1  ;clear
1302 : a50e                     lda zpt+2
1304 : 49c3                     eor #$c3
1306 : c517                     cmp zp1+2
                                trap_ne     ;store to zp data
                        
130a : 860e                     stx zpt+2   ;clear
130c : ad0502                   lda abst+2
130f : 49c3                     eor #$c3
1311 : cd1a02                   cmp abs1+2
                                trap_ne     ;store to abs data
                        
1316 : 8e0502                   stx abst+2  ;clear
1319 : a50f                     lda zpt+3
131b : 49c3                     eor #$c3
131d : c518                     cmp zp1+3
                                trap_ne     ;store to zp data
                        
1321 : 860f                     stx zpt+3   ;clear
1323 : ad0602                   lda abst+3
1326 : 49c3                     eor #$c3
1328 : cd1b02                   cmp abs1+3
                                trap_ne     ;store to abs data
                        
132d : 8e0602                   stx abst+3  ;clear
                                next_test
                        
                        
                        ; LDY / STY - zp / abs / #
                                set_stat 0
                        
1340 : a415                     ldy zp1
1342 : 08                       php         ;test stores do not alter flags
1343 : 98                       tya
1344 : 49c3                     eor #$c3
1346 : a8                       tay
1347 : 28                       plp
1348 : 8c0302                   sty abst
134b : 08                       php         ;flags after load/store sequence
134c : 49c3                     eor #$c3
134e : a8                       tay
134f : c0c3                     cpy #$c3    ;test result
                                trap_ne
                        
1353 : 68                       pla         ;load status
                                eor_flag 0
                        
1356 : cd1d02                   cmp fLDx    ;test flags
                                trap_ne
                        
                                set_stat 0
                        
135f : a416                     ldy zp1+1
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   52
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

1361 : 08                       php         ;test stores do not alter flags
1362 : 98                       tya
1363 : 49c3                     eor #$c3
1365 : a8                       tay
1366 : 28                       plp
1367 : 8c0402                   sty abst+1
136a : 08                       php         ;flags after load/store sequence
136b : 49c3                     eor #$c3
136d : a8                       tay
136e : c082                     cpy #$82    ;test result
                                trap_ne
                        
1372 : 68                       pla         ;load status
                                eor_flag 0
                        
1375 : cd1e02                   cmp fLDx+1  ;test flags
                                trap_ne
                        
                                set_stat 0
                        
137e : a417                     ldy zp1+2
1380 : 08                       php         ;test stores do not alter flags
1381 : 98                       tya
1382 : 49c3                     eor #$c3
1384 : a8                       tay
1385 : 28                       plp
1386 : 8c0502                   sty abst+2
1389 : 08                       php         ;flags after load/store sequence
138a : 49c3                     eor #$c3
138c : a8                       tay
138d : c041                     cpy #$41    ;test result
                                trap_ne
                        
1391 : 68                       pla         ;load status
                                eor_flag 0
                        
1394 : cd1f02                   cmp fLDx+2  ;test flags
                                trap_ne
                        
                                set_stat 0
                        
139d : a418                     ldy zp1+3
139f : 08                       php         ;test stores do not alter flags
13a0 : 98                       tya
13a1 : 49c3                     eor #$c3
13a3 : a8                       tay
13a4 : 28                       plp
13a5 : 8c0602                   sty abst+3
13a8 : 08                       php         ;flags after load/store sequence
13a9 : 49c3                     eor #$c3
13ab : a8                       tay
13ac : c000                     cpy #0      ;test result
                                trap_ne
                        
13b0 : 68                       pla         ;load status
                                eor_flag 0
                        
13b3 : cd2002                   cmp fLDx+3  ;test flags
                                trap_ne
                        
                        
                                set_stat $ff
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   53
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                        
13bc : a415                     ldy zp1
13be : 08                       php         ;test stores do not alter flags
13bf : 98                       tya
13c0 : 49c3                     eor #$c3
13c2 : a8                       tay
13c3 : 28                       plp
13c4 : 8c0302                   sty abst
13c7 : 08                       php         ;flags after load/store sequence
13c8 : 49c3                     eor #$c3
13ca : a8                       tay
13cb : c0c3                     cpy #$c3    ;test result
                                trap_ne
                        
13cf : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
                        
13d2 : cd1d02                   cmp fLDx    ;test flags
                                trap_ne
                        
                                set_stat $ff
                        
13db : a416                     ldy zp1+1
13dd : 08                       php         ;test stores do not alter flags
13de : 98                       tya
13df : 49c3                     eor #$c3
13e1 : a8                       tay
13e2 : 28                       plp
13e3 : 8c0402                   sty abst+1
13e6 : 08                       php         ;flags after load/store sequence
13e7 : 49c3                     eor #$c3
13e9 : a8                       tay
13ea : c082                     cpy #$82   ;test result
                                trap_ne
                        
13ee : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
                        
13f1 : cd1e02                   cmp fLDx+1  ;test flags
                                trap_ne
                        
                                set_stat $ff
                        
13fa : a417                     ldy zp1+2
13fc : 08                       php         ;test stores do not alter flags
13fd : 98                       tya
13fe : 49c3                     eor #$c3
1400 : a8                       tay
1401 : 28                       plp
1402 : 8c0502                   sty abst+2
1405 : 08                       php         ;flags after load/store sequence
1406 : 49c3                     eor #$c3
1408 : a8                       tay
1409 : c041                     cpy #$41    ;test result
                                trap_ne
                        
140d : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
                        
1410 : cd1f02                   cmp fLDx+2  ;test flags
                                trap_ne
                        
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   54
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                                set_stat $ff
                        
1419 : a418                     ldy zp1+3
141b : 08                       php         ;test stores do not alter flags
141c : 98                       tya
141d : 49c3                     eor #$c3
141f : a8                       tay
1420 : 28                       plp
1421 : 8c0602                   sty abst+3
1424 : 08                       php         ;flags after load/store sequence
1425 : 49c3                     eor #$c3
1427 : a8                       tay
1428 : c000                     cpy #0      ;test result
                                trap_ne
                        
142c : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
                        
142f : cd2002                   cmp fLDx+3  ;test flags
                                trap_ne
                        
                        
                                set_stat 0
                        
1438 : ac1802                   ldy abs1
143b : 08                       php         ;test stores do not alter flags
143c : 98                       tya
143d : 49c3                     eor #$c3
143f : a8                       tay
1440 : 28                       plp
1441 : 840c                     sty zpt
1443 : 08                       php         ;flags after load/store sequence
1444 : 49c3                     eor #$c3
1446 : a8                       tay
1447 : c415                     cpy zp1     ;test result
                                trap_ne
                        
144b : 68                       pla         ;load status
                                eor_flag 0
                        
144e : cd1d02                   cmp fLDx    ;test flags
                                trap_ne
                        
                                set_stat 0
                        
1457 : ac1902                   ldy abs1+1
145a : 08                       php         ;test stores do not alter flags
145b : 98                       tya
145c : 49c3                     eor #$c3
145e : a8                       tay
145f : 28                       plp
1460 : 840d                     sty zpt+1
1462 : 08                       php         ;flags after load/store sequence
1463 : 49c3                     eor #$c3
1465 : a8                       tay
1466 : c416                     cpy zp1+1   ;test result
                                trap_ne
                        
146a : 68                       pla         ;load status
                                eor_flag 0
                        
146d : cd1e02                   cmp fLDx+1  ;test flags
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   55
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                                trap_ne
                        
                                set_stat 0
                        
1476 : ac1a02                   ldy abs1+2
1479 : 08                       php         ;test stores do not alter flags
147a : 98                       tya
147b : 49c3                     eor #$c3
147d : a8                       tay
147e : 28                       plp
147f : 840e                     sty zpt+2
1481 : 08                       php         ;flags after load/store sequence
1482 : 49c3                     eor #$c3
1484 : a8                       tay
1485 : c417                     cpy zp1+2   ;test result
                                trap_ne
                        
1489 : 68                       pla         ;load status
                                eor_flag 0
                        
148c : cd1f02                   cmp fLDx+2  ;test flags
                                trap_ne
                        
                                set_stat 0
                        
1495 : ac1b02                   ldy abs1+3
1498 : 08                       php         ;test stores do not alter flags
1499 : 98                       tya
149a : 49c3                     eor #$c3
149c : a8                       tay
149d : 28                       plp
149e : 840f                     sty zpt+3
14a0 : 08                       php         ;flags after load/store sequence
14a1 : 49c3                     eor #$c3
14a3 : a8                       tay
14a4 : c418                     cpy zp1+3   ;test result
                                trap_ne
                        
14a8 : 68                       pla         ;load status
                                eor_flag 0
                        
14ab : cd2002                   cmp fLDx+3  ;test flags
                                trap_ne
                        
                        
                                set_stat $ff
                        
14b4 : ac1802                   ldy abs1
14b7 : 08                       php         ;test stores do not alter flags
14b8 : 98                       tya
14b9 : 49c3                     eor #$c3
14bb : a8                       tay
14bc : 28                       plp
14bd : 840c                     sty zpt
14bf : 08                       php         ;flags after load/store sequence
14c0 : 49c3                     eor #$c3
14c2 : a8                       tay
14c3 : c515                     cmp zp1     ;test result
                                trap_ne
                        
14c7 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   56
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                        
14ca : cd1d02                   cmp fLDx    ;test flags
                                trap_ne
                        
                                set_stat $ff
                        
14d3 : ac1902                   ldy abs1+1
14d6 : 08                       php         ;test stores do not alter flags
14d7 : 98                       tya
14d8 : 49c3                     eor #$c3
14da : a8                       tay
14db : 28                       plp
14dc : 840d                     sty zpt+1
14de : 08                       php         ;flags after load/store sequence
14df : 49c3                     eor #$c3
14e1 : a8                       tay
14e2 : c516                     cmp zp1+1   ;test result
                                trap_ne
                        
14e6 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
                        
14e9 : cd1e02                   cmp fLDx+1  ;test flags
                                trap_ne
                        
                                set_stat $ff
                        
14f2 : ac1a02                   ldy abs1+2
14f5 : 08                       php         ;test stores do not alter flags
14f6 : 98                       tya
14f7 : 49c3                     eor #$c3
14f9 : a8                       tay
14fa : 28                       plp
14fb : 840e                     sty zpt+2
14fd : 08                       php         ;flags after load/store sequence
14fe : 49c3                     eor #$c3
1500 : a8                       tay
1501 : c517                     cmp zp1+2   ;test result
                                trap_ne
                        
1505 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
                        
1508 : cd1f02                   cmp fLDx+2  ;test flags
                                trap_ne
                        
                                set_stat $ff
                        
1511 : ac1b02                   ldy abs1+3
1514 : 08                       php         ;test stores do not alter flags
1515 : 98                       tya
1516 : 49c3                     eor #$c3
1518 : a8                       tay
1519 : 28                       plp
151a : 840f                     sty zpt+3
151c : 08                       php         ;flags after load/store sequence
151d : 49c3                     eor #$c3
151f : a8                       tay
1520 : c518                     cmp zp1+3   ;test result
                                trap_ne
                        
1524 : 68                       pla         ;load status
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   57
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                                eor_flag lo~fnz ;mask bits not altered
                        
1527 : cd2002                   cmp fLDx+3  ;test flags
                                trap_ne
                        
                        
                        
                                set_stat 0
                        
1530 : a0c3                     ldy #$c3
1532 : 08                       php
1533 : cc1802                   cpy abs1    ;test result
                                trap_ne
                        
1538 : 68                       pla         ;load status
                                eor_flag 0
                        
153b : cd1d02                   cmp fLDx    ;test flags
                                trap_ne
                        
                                set_stat 0
                        
1544 : a082                     ldy #$82
1546 : 08                       php
1547 : cc1902                   cpy abs1+1  ;test result
                                trap_ne
                        
154c : 68                       pla         ;load status
                                eor_flag 0
                        
154f : cd1e02                   cmp fLDx+1  ;test flags
                                trap_ne
                        
                                set_stat 0
                        
1558 : a041                     ldy #$41
155a : 08                       php
155b : cc1a02                   cpy abs1+2  ;test result
                                trap_ne
                        
1560 : 68                       pla         ;load status
                                eor_flag 0
                        
1563 : cd1f02                   cmp fLDx+2  ;test flags
                                trap_ne
                        
                                set_stat 0
                        
156c : a000                     ldy #0
156e : 08                       php
156f : cc1b02                   cpy abs1+3  ;test result
                                trap_ne
                        
1574 : 68                       pla         ;load status
                                eor_flag 0
                        
1577 : cd2002                   cmp fLDx+3  ;test flags
                                trap_ne
                        
                        
                                set_stat $ff
                        
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   58
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

1580 : a0c3                     ldy #$c3
1582 : 08                       php
1583 : cc1802                   cpy abs1    ;test result
                                trap_ne
                        
1588 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
                        
158b : cd1d02                   cmp fLDx    ;test flags
                                trap_ne
                        
                                set_stat $ff
                        
1594 : a082                     ldy #$82
1596 : 08                       php
1597 : cc1902                   cpy abs1+1  ;test result
                                trap_ne
                        
159c : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
                        
159f : cd1e02                   cmp fLDx+1  ;test flags
                                trap_ne
                        
                                set_stat $ff
                        
15a8 : a041                     ldy #$41
15aa : 08                       php
15ab : cc1a02                   cpy abs1+2   ;test result
                                trap_ne
                        
15b0 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
                        
15b3 : cd1f02                   cmp fLDx+2  ;test flags
                                trap_ne
                        
                                set_stat $ff
                        
15bc : a000                     ldy #0
15be : 08                       php
15bf : cc1b02                   cpy abs1+3  ;test result
                                trap_ne
                        
15c4 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
                        
15c7 : cd2002                   cmp fLDx+3  ;test flags
                                trap_ne
                        
                        
15cc : a000                     ldy #0
15ce : a50c                     lda zpt
15d0 : 49c3                     eor #$c3
15d2 : c515                     cmp zp1
                                trap_ne     ;store to zp   data
                        
15d6 : 840c                     sty zpt     ;clear
15d8 : ad0302                   lda abst
15db : 49c3                     eor #$c3
15dd : cd1802                   cmp abs1
                                trap_ne     ;store to abs   data
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   59
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                        
15e2 : 8c0302                   sty abst    ;clear
15e5 : a50d                     lda zpt+1
15e7 : 49c3                     eor #$c3
15e9 : c516                     cmp zp1+1
                                trap_ne     ;store to zp+1 data
                        
15ed : 840d                     sty zpt+1   ;clear
15ef : ad0402                   lda abst+1
15f2 : 49c3                     eor #$c3
15f4 : cd1902                   cmp abs1+1
                                trap_ne     ;store to abs+1 data
                        
15f9 : 8c0402                   sty abst+1  ;clear
15fc : a50e                     lda zpt+2
15fe : 49c3                     eor #$c3
1600 : c517                     cmp zp1+2
                                trap_ne     ;store to zp+2 data
                        
1604 : 840e                     sty zpt+2   ;clear
1606 : ad0502                   lda abst+2
1609 : 49c3                     eor #$c3
160b : cd1a02                   cmp abs1+2
                                trap_ne     ;store to abs+2 data
                        
1610 : 8c0502                   sty abst+2  ;clear
1613 : a50f                     lda zpt+3
1615 : 49c3                     eor #$c3
1617 : c518                     cmp zp1+3
                                trap_ne     ;store to zp+3 data
                        
161b : 840f                     sty zpt+3   ;clear
161d : ad0602                   lda abst+3
1620 : 49c3                     eor #$c3
1622 : cd1b02                   cmp abs1+3
                                trap_ne     ;store to abs+3 data
                        
1627 : 8c0602                   sty abst+3  ;clear
                                next_test
                        
                        
                        ; testing load / store accumulator LDA / STA all addressing modes
                        ; LDA / STA - zp,x / abs,x
1636 : a203                     ldx #3
1638 :                  tldax
                                set_stat 0
                        
163c : b515                     lda zp1,x
163e : 08                       php         ;test stores do not alter flags
163f : 49c3                     eor #$c3
1641 : 28                       plp
1642 : 9d0302                   sta abst,x
1645 : 08                       php         ;flags after load/store sequence
1646 : 49c3                     eor #$c3
1648 : dd1802                   cmp abs1,x  ;test result
                                trap_ne
                        
164d : 68                       pla         ;load status
                                eor_flag 0
                        
1650 : dd1d02                   cmp fLDx,x  ;test flags
                                trap_ne
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   60
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                        
1655 : ca                       dex
1656 : 10e0                     bpl tldax
                        
1658 : a203                     ldx #3
165a :                  tldax1
                                set_stat $ff
                        
165e : b515                     lda zp1,x
1660 : 08                       php         ;test stores do not alter flags
1661 : 49c3                     eor #$c3
1663 : 28                       plp
1664 : 9d0302                   sta abst,x
1667 : 08                       php         ;flags after load/store sequence
1668 : 49c3                     eor #$c3
166a : dd1802                   cmp abs1,x   ;test result
                                trap_ne
                        
166f : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
                        
1672 : dd1d02                   cmp fLDx,x  ;test flags
                                trap_ne
                        
1677 : ca                       dex
1678 : 10e0                     bpl tldax1
                        
167a : a203                     ldx #3
167c :                  tldax2
                                set_stat 0
                        
1680 : bd1802                   lda abs1,x
1683 : 08                       php         ;test stores do not alter flags
1684 : 49c3                     eor #$c3
1686 : 28                       plp
1687 : 950c                     sta zpt,x
1689 : 08                       php         ;flags after load/store sequence
168a : 49c3                     eor #$c3
168c : d515                     cmp zp1,x   ;test result
                                trap_ne
                        
1690 : 68                       pla         ;load status
                                eor_flag 0
                        
1693 : dd1d02                   cmp fLDx,x  ;test flags
                                trap_ne
                        
1698 : ca                       dex
1699 : 10e1                     bpl tldax2
                        
169b : a203                     ldx #3
169d :                  tldax3
                                set_stat $ff
                        
16a1 : bd1802                   lda abs1,x
16a4 : 08                       php         ;test stores do not alter flags
16a5 : 49c3                     eor #$c3
16a7 : 28                       plp
16a8 : 950c                     sta zpt,x
16aa : 08                       php         ;flags after load/store sequence
16ab : 49c3                     eor #$c3
16ad : d515                     cmp zp1,x   ;test result
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   61
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                                trap_ne
                        
16b1 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
                        
16b4 : dd1d02                   cmp fLDx,x  ;test flags
                                trap_ne
                        
16b9 : ca                       dex
16ba : 10e1                     bpl tldax3
                        
16bc : a203                     ldx #3      ;testing store result
16be : a000                     ldy #0
16c0 : b50c             tstax   lda zpt,x
16c2 : 49c3                     eor #$c3
16c4 : d515                     cmp zp1,x
                                trap_ne     ;store to zp,x data
                        
16c8 : 940c                     sty zpt,x   ;clear
16ca : bd0302                   lda abst,x
16cd : 49c3                     eor #$c3
16cf : dd1802                   cmp abs1,x
                                trap_ne     ;store to abs,x data
                        
16d4 : 8a                       txa
16d5 : 9d0302                   sta abst,x  ;clear
16d8 : ca                       dex
16d9 : 10e5                     bpl tstax
                                next_test
                        
                        
                        ; LDA / STA - (zp),y / abs,y / (zp,x)
16e7 : a003                     ldy #3
16e9 :                  tlday
                                set_stat 0
                        
16ed : b126                     lda (ind1),y
16ef : 08                       php         ;test stores do not alter flags
16f0 : 49c3                     eor #$c3
16f2 : 28                       plp
16f3 : 990302                   sta abst,y
16f6 : 08                       php         ;flags after load/store sequence
16f7 : 49c3                     eor #$c3
16f9 : d91802                   cmp abs1,y  ;test result
                                trap_ne
                        
16fe : 68                       pla         ;load status
                                eor_flag 0
                        
1701 : d91d02                   cmp fLDx,y  ;test flags
                                trap_ne
                        
1706 : 88                       dey
1707 : 10e0                     bpl tlday
                        
1709 : a003                     ldy #3
170b :                  tlday1
                                set_stat $ff
                        
170f : b126                     lda (ind1),y
1711 : 08                       php         ;test stores do not alter flags
1712 : 49c3                     eor #$c3
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   62
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

1714 : 28                       plp
1715 : 990302                   sta abst,y
1718 : 08                       php         ;flags after load/store sequence
1719 : 49c3                     eor #$c3
171b : d91802                   cmp abs1,y  ;test result
                                trap_ne
                        
1720 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
                        
1723 : d91d02                   cmp fLDx,y  ;test flags
                                trap_ne
                        
1728 : 88                       dey
1729 : 10e0                     bpl tlday1
                        
172b : a003                     ldy #3      ;testing store result
172d : a200                     ldx #0
172f : b90302           tstay   lda abst,y
1732 : 49c3                     eor #$c3
1734 : d91802                   cmp abs1,y
                                trap_ne     ;store to abs data
                        
1739 : 8a                       txa
173a : 990302                   sta abst,y  ;clear
173d : 88                       dey
173e : 10ef                     bpl tstay
                        
1740 : a003                     ldy #3
1742 :                  tlday2
                                set_stat 0
                        
1746 : b91802                   lda abs1,y
1749 : 08                       php         ;test stores do not alter flags
174a : 49c3                     eor #$c3
174c : 28                       plp
174d : 9132                     sta (indt),y
174f : 08                       php         ;flags after load/store sequence
1750 : 49c3                     eor #$c3
1752 : d126                     cmp (ind1),y    ;test result
                                trap_ne
                        
1756 : 68                       pla         ;load status
                                eor_flag 0
                        
1759 : d91d02                   cmp fLDx,y  ;test flags
                                trap_ne
                        
175e : 88                       dey
175f : 10e1                     bpl tlday2
                        
1761 : a003                     ldy #3
1763 :                  tlday3
                                set_stat $ff
                        
1767 : b91802                   lda abs1,y
176a : 08                       php         ;test stores do not alter flags
176b : 49c3                     eor #$c3
176d : 28                       plp
176e : 9132                     sta (indt),y
1770 : 08                       php         ;flags after load/store sequence
1771 : 49c3                     eor #$c3
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   63
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

1773 : d126                     cmp (ind1),y   ;test result
                                trap_ne
                        
1777 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
                        
177a : d91d02                   cmp fLDx,y  ;test flags
                                trap_ne
                        
177f : 88                       dey
1780 : 10e1                     bpl tlday3
                        
1782 : a003                     ldy #3      ;testing store result
1784 : a200                     ldx #0
1786 : b90302           tstay1  lda abst,y
1789 : 49c3                     eor #$c3
178b : d91802                   cmp abs1,y
                                trap_ne     ;store to abs data
                        
1790 : 8a                       txa
1791 : 990302                   sta abst,y  ;clear
1794 : 88                       dey
1795 : 10ef                     bpl tstay1
                        
1797 : a206                     ldx #6
1799 : a003                     ldy #3
179b :                  tldax4
                                set_stat 0
                        
179f : a126                     lda (ind1,x)
17a1 : 08                       php         ;test stores do not alter flags
17a2 : 49c3                     eor #$c3
17a4 : 28                       plp
17a5 : 8132                     sta (indt,x)
17a7 : 08                       php         ;flags after load/store sequence
17a8 : 49c3                     eor #$c3
17aa : d91802                   cmp abs1,y  ;test result
                                trap_ne
                        
17af : 68                       pla         ;load status
                                eor_flag 0
                        
17b2 : d91d02                   cmp fLDx,y  ;test flags
                                trap_ne
                        
17b7 : ca                       dex
17b8 : ca                       dex
17b9 : 88                       dey
17ba : 10df                     bpl tldax4
                        
17bc : a206                     ldx #6
17be : a003                     ldy #3
17c0 :                  tldax5
                                set_stat $ff
                        
17c4 : a126                     lda (ind1,x)
17c6 : 08                       php         ;test stores do not alter flags
17c7 : 49c3                     eor #$c3
17c9 : 28                       plp
17ca : 8132                     sta (indt,x)
17cc : 08                       php         ;flags after load/store sequence
17cd : 49c3                     eor #$c3
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   64
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

17cf : d91802                   cmp abs1,y  ;test result
                                trap_ne
                        
17d4 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
                        
17d7 : d91d02                   cmp fLDx,y  ;test flags
                                trap_ne
                        
17dc : ca                       dex
17dd : ca                       dex
17de : 88                       dey
17df : 10df                     bpl tldax5
                        
17e1 : a003                     ldy #3      ;testing store result
17e3 : a200                     ldx #0
17e5 : b90302           tstay2  lda abst,y
17e8 : 49c3                     eor #$c3
17ea : d91802                   cmp abs1,y
                                trap_ne     ;store to abs data
                        
17ef : 8a                       txa
17f0 : 990302                   sta abst,y  ;clear
17f3 : 88                       dey
17f4 : 10ef                     bpl tstay2
                                next_test
                        
                        
                        ; indexed wraparound test (only zp should wrap)
1802 : a2fd                     ldx #3+$fa
1804 : b51b             tldax6  lda zp1-$fa&$ff,x   ;wrap on indexed zp
1806 : 9d0901                   sta abst-$fa,x      ;no STX abs,x!
1809 : ca                       dex
180a : e0fa                     cpx #$fa
180c : b0f6                     bcs tldax6
180e : a2fd                     ldx #3+$fa
1810 : bd1e01           tldax7  lda abs1-$fa,x      ;no wrap on indexed abs
1813 : 9512                     sta zpt-$fa&$ff,x
1815 : ca                       dex
1816 : e0fa                     cpx #$fa
1818 : b0f6                     bcs tldax7
                        
181a : a203                     ldx #3      ;testing wraparound result
181c : a000                     ldy #0
181e : b50c             tstax1  lda zpt,x
1820 : d515                     cmp zp1,x
                                trap_ne     ;store to zp,x data
                        
1824 : 940c                     sty zpt,x   ;clear
1826 : bd0302                   lda abst,x
1829 : dd1802                   cmp abs1,x
                                trap_ne     ;store to abs,x data
                        
182e : 8a                       txa
182f : 9d0302                   sta abst,x  ;clear
1832 : ca                       dex
1833 : 10e9                     bpl tstax1
                        
1835 : a0fb                     ldy #3+$f8
1837 : a2fe                     ldx #6+$f8
1839 : a12e             tlday4  lda (ind1-$f8&$ff,x) ;wrap on indexed zp indirect
183b : 990b01                   sta abst-$f8,y
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   65
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

183e : ca                       dex
183f : ca                       dex
1840 : 88                       dey
1841 : c0f8                     cpy #$f8
1843 : b0f4                     bcs tlday4
1845 : a003                     ldy #3      ;testing wraparound result
1847 : a200                     ldx #0
1849 : b90302           tstay4  lda abst,y
184c : d91802                   cmp abs1,y
                                trap_ne     ;store to abs data
                        
1851 : 8a                       txa
1852 : 990302                   sta abst,y  ;clear
1855 : 88                       dey
1856 : 10f1                     bpl tstay4
                        
1858 : a0fb                     ldy #3+$f8
185a : b92001           tlday5  lda abs1-$f8,y  ;no wrap on indexed abs
185d : 913a                     sta (inwt),y
185f : 88                       dey
1860 : c0f8                     cpy #$f8
1862 : b0f6                     bcs tlday5
1864 : a003                     ldy #3      ;testing wraparound result
1866 : a200                     ldx #0
1868 : b90302           tstay5  lda abst,y
186b : d91802                   cmp abs1,y
                                trap_ne     ;store to abs data
                        
1870 : 8a                       txa
1871 : 990302                   sta abst,y  ;clear
1874 : 88                       dey
1875 : 10f1                     bpl tstay5
                        
1877 : a0fb                     ldy #3+$f8
1879 : a2fe                     ldx #6+$f8
187b : b130             tlday6  lda (inw1),y    ;no wrap on zp indirect indexed
187d : 813a                     sta (indt-$f8&$ff,x)
187f : ca                       dex
1880 : ca                       dex
1881 : 88                       dey
1882 : c0f8                     cpy #$f8
1884 : b0f5                     bcs tlday6
1886 : a003                     ldy #3      ;testing wraparound result
1888 : a200                     ldx #0
188a : b90302           tstay6  lda abst,y
188d : d91802                   cmp abs1,y
                                trap_ne     ;store to abs data
                        
1892 : 8a                       txa
1893 : 990302                   sta abst,y  ;clear
1896 : 88                       dey
1897 : 10f1                     bpl tstay6
                                next_test
                        
                        
                        ; LDA / STA - zp / abs / #
                                set_stat 0
                        
18a9 : a515                     lda zp1
18ab : 08                       php         ;test stores do not alter flags
18ac : 49c3                     eor #$c3
18ae : 28                       plp
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   66
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

18af : 8d0302                   sta abst
18b2 : 08                       php         ;flags after load/store sequence
18b3 : 49c3                     eor #$c3
18b5 : c9c3                     cmp #$c3    ;test result
                                trap_ne
                        
18b9 : 68                       pla         ;load status
                                eor_flag 0
                        
18bc : cd1d02                   cmp fLDx    ;test flags
                                trap_ne
                        
                                set_stat 0
                        
18c5 : a516                     lda zp1+1
18c7 : 08                       php         ;test stores do not alter flags
18c8 : 49c3                     eor #$c3
18ca : 28                       plp
18cb : 8d0402                   sta abst+1
18ce : 08                       php         ;flags after load/store sequence
18cf : 49c3                     eor #$c3
18d1 : c982                     cmp #$82    ;test result
                                trap_ne
                        
18d5 : 68                       pla         ;load status
                                eor_flag 0
                        
18d8 : cd1e02                   cmp fLDx+1  ;test flags
                                trap_ne
                        
                                set_stat 0
                        
18e1 : a517                     lda zp1+2
18e3 : 08                       php         ;test stores do not alter flags
18e4 : 49c3                     eor #$c3
18e6 : 28                       plp
18e7 : 8d0502                   sta abst+2
18ea : 08                       php         ;flags after load/store sequence
18eb : 49c3                     eor #$c3
18ed : c941                     cmp #$41    ;test result
                                trap_ne
                        
18f1 : 68                       pla         ;load status
                                eor_flag 0
                        
18f4 : cd1f02                   cmp fLDx+2  ;test flags
                                trap_ne
                        
                                set_stat 0
                        
18fd : a518                     lda zp1+3
18ff : 08                       php         ;test stores do not alter flags
1900 : 49c3                     eor #$c3
1902 : 28                       plp
1903 : 8d0602                   sta abst+3
1906 : 08                       php         ;flags after load/store sequence
1907 : 49c3                     eor #$c3
1909 : c900                     cmp #0      ;test result
                                trap_ne
                        
190d : 68                       pla         ;load status
                                eor_flag 0
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   67
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                        
1910 : cd2002                   cmp fLDx+3  ;test flags
                                trap_ne
                        
                                set_stat $ff
                        
1919 : a515                     lda zp1
191b : 08                       php         ;test stores do not alter flags
191c : 49c3                     eor #$c3
191e : 28                       plp
191f : 8d0302                   sta abst
1922 : 08                       php         ;flags after load/store sequence
1923 : 49c3                     eor #$c3
1925 : c9c3                     cmp #$c3    ;test result
                                trap_ne
                        
1929 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
                        
192c : cd1d02                   cmp fLDx    ;test flags
                                trap_ne
                        
                                set_stat $ff
                        
1935 : a516                     lda zp1+1
1937 : 08                       php         ;test stores do not alter flags
1938 : 49c3                     eor #$c3
193a : 28                       plp
193b : 8d0402                   sta abst+1
193e : 08                       php         ;flags after load/store sequence
193f : 49c3                     eor #$c3
1941 : c982                     cmp #$82    ;test result
                                trap_ne
                        
1945 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
                        
1948 : cd1e02                   cmp fLDx+1  ;test flags
                                trap_ne
                        
                                set_stat $ff
                        
1951 : a517                     lda zp1+2
1953 : 08                       php         ;test stores do not alter flags
1954 : 49c3                     eor #$c3
1956 : 28                       plp
1957 : 8d0502                   sta abst+2
195a : 08                       php         ;flags after load/store sequence
195b : 49c3                     eor #$c3
195d : c941                     cmp #$41    ;test result
                                trap_ne
                        
1961 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
                        
1964 : cd1f02                   cmp fLDx+2  ;test flags
                                trap_ne
                        
                                set_stat $ff
                        
196d : a518                     lda zp1+3
196f : 08                       php         ;test stores do not alter flags
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   68
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

1970 : 49c3                     eor #$c3
1972 : 28                       plp
1973 : 8d0602                   sta abst+3
1976 : 08                       php         ;flags after load/store sequence
1977 : 49c3                     eor #$c3
1979 : c900                     cmp #0      ;test result
                                trap_ne
                        
197d : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
                        
1980 : cd2002                   cmp fLDx+3  ;test flags
                                trap_ne
                        
                                set_stat 0
                        
1989 : ad1802                   lda abs1
198c : 08                       php         ;test stores do not alter flags
198d : 49c3                     eor #$c3
198f : 28                       plp
1990 : 850c                     sta zpt
1992 : 08                       php         ;flags after load/store sequence
1993 : 49c3                     eor #$c3
1995 : c515                     cmp zp1     ;test result
                                trap_ne
                        
1999 : 68                       pla         ;load status
                                eor_flag 0
                        
199c : cd1d02                   cmp fLDx    ;test flags
                                trap_ne
                        
                                set_stat 0
                        
19a5 : ad1902                   lda abs1+1
19a8 : 08                       php         ;test stores do not alter flags
19a9 : 49c3                     eor #$c3
19ab : 28                       plp
19ac : 850d                     sta zpt+1
19ae : 08                       php         ;flags after load/store sequence
19af : 49c3                     eor #$c3
19b1 : c516                     cmp zp1+1   ;test result
                                trap_ne
                        
19b5 : 68                       pla         ;load status
                                eor_flag 0
                        
19b8 : cd1e02                   cmp fLDx+1  ;test flags
                                trap_ne
                        
                                set_stat 0
                        
19c1 : ad1a02                   lda abs1+2
19c4 : 08                       php         ;test stores do not alter flags
19c5 : 49c3                     eor #$c3
19c7 : 28                       plp
19c8 : 850e                     sta zpt+2
19ca : 08                       php         ;flags after load/store sequence
19cb : 49c3                     eor #$c3
19cd : c517                     cmp zp1+2   ;test result
                                trap_ne
                        
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   69
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

19d1 : 68                       pla         ;load status
                                eor_flag 0
                        
19d4 : cd1f02                   cmp fLDx+2  ;test flags
                                trap_ne
                        
                                set_stat 0
                        
19dd : ad1b02                   lda abs1+3
19e0 : 08                       php         ;test stores do not alter flags
19e1 : 49c3                     eor #$c3
19e3 : 28                       plp
19e4 : 850f                     sta zpt+3
19e6 : 08                       php         ;flags after load/store sequence
19e7 : 49c3                     eor #$c3
19e9 : c518                     cmp zp1+3   ;test result
                                trap_ne
                        
19ed : 68                       pla         ;load status
                                eor_flag 0
                        
19f0 : cd2002                   cmp fLDx+3  ;test flags
                                trap_ne
                        
                                set_stat $ff
                        
19f9 : ad1802                   lda abs1
19fc : 08                       php         ;test stores do not alter flags
19fd : 49c3                     eor #$c3
19ff : 28                       plp
1a00 : 850c                     sta zpt
1a02 : 08                       php         ;flags after load/store sequence
1a03 : 49c3                     eor #$c3
1a05 : c515                     cmp zp1     ;test result
                                trap_ne
                        
1a09 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
                        
1a0c : cd1d02                   cmp fLDx    ;test flags
                                trap_ne
                        
                                set_stat $ff
                        
1a15 : ad1902                   lda abs1+1
1a18 : 08                       php         ;test stores do not alter flags
1a19 : 49c3                     eor #$c3
1a1b : 28                       plp
1a1c : 850d                     sta zpt+1
1a1e : 08                       php         ;flags after load/store sequence
1a1f : 49c3                     eor #$c3
1a21 : c516                     cmp zp1+1   ;test result
                                trap_ne
                        
1a25 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
                        
1a28 : cd1e02                   cmp fLDx+1  ;test flags
                                trap_ne
                        
                                set_stat $ff
                        
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   70
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

1a31 : ad1a02                   lda abs1+2
1a34 : 08                       php         ;test stores do not alter flags
1a35 : 49c3                     eor #$c3
1a37 : 28                       plp
1a38 : 850e                     sta zpt+2
1a3a : 08                       php         ;flags after load/store sequence
1a3b : 49c3                     eor #$c3
1a3d : c517                     cmp zp1+2   ;test result
                                trap_ne
                        
1a41 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
                        
1a44 : cd1f02                   cmp fLDx+2  ;test flags
                                trap_ne
                        
                                set_stat $ff
                        
1a4d : ad1b02                   lda abs1+3
1a50 : 08                       php         ;test stores do not alter flags
1a51 : 49c3                     eor #$c3
1a53 : 28                       plp
1a54 : 850f                     sta zpt+3
1a56 : 08                       php         ;flags after load/store sequence
1a57 : 49c3                     eor #$c3
1a59 : c518                     cmp zp1+3   ;test result
                                trap_ne
                        
1a5d : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
                        
1a60 : cd2002                   cmp fLDx+3  ;test flags
                                trap_ne
                        
                                set_stat 0
                        
1a69 : a9c3                     lda #$c3
1a6b : 08                       php
1a6c : cd1802                   cmp abs1    ;test result
                                trap_ne
                        
1a71 : 68                       pla         ;load status
                                eor_flag 0
                        
1a74 : cd1d02                   cmp fLDx    ;test flags
                                trap_ne
                        
                                set_stat 0
                        
1a7d : a982                     lda #$82
1a7f : 08                       php
1a80 : cd1902                   cmp abs1+1  ;test result
                                trap_ne
                        
1a85 : 68                       pla         ;load status
                                eor_flag 0
                        
1a88 : cd1e02                   cmp fLDx+1  ;test flags
                                trap_ne
                        
                                set_stat 0
                        
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   71
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

1a91 : a941                     lda #$41
1a93 : 08                       php
1a94 : cd1a02                   cmp abs1+2  ;test result
                                trap_ne
                        
1a99 : 68                       pla         ;load status
                                eor_flag 0
                        
1a9c : cd1f02                   cmp fLDx+2  ;test flags
                                trap_ne
                        
                                set_stat 0
                        
1aa5 : a900                     lda #0
1aa7 : 08                       php
1aa8 : cd1b02                   cmp abs1+3  ;test result
                                trap_ne
                        
1aad : 68                       pla         ;load status
                                eor_flag 0
                        
1ab0 : cd2002                   cmp fLDx+3  ;test flags
                                trap_ne
                        
                        
                                set_stat $ff
                        
1ab9 : a9c3                     lda #$c3
1abb : 08                       php
1abc : cd1802                   cmp abs1    ;test result
                                trap_ne
                        
1ac1 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
                        
1ac4 : cd1d02                   cmp fLDx    ;test flags
                                trap_ne
                        
                                set_stat $ff
                        
1acd : a982                     lda #$82
1acf : 08                       php
1ad0 : cd1902                   cmp abs1+1  ;test result
                                trap_ne
                        
1ad5 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
                        
1ad8 : cd1e02                   cmp fLDx+1  ;test flags
                                trap_ne
                        
                                set_stat $ff
                        
1ae1 : a941                     lda #$41
1ae3 : 08                       php
1ae4 : cd1a02                   cmp abs1+2  ;test result
                                trap_ne
                        
1ae9 : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
                        
1aec : cd1f02                   cmp fLDx+2  ;test flags
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   72
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                                trap_ne
                        
                                set_stat $ff
                        
1af5 : a900                     lda #0
1af7 : 08                       php
1af8 : cd1b02                   cmp abs1+3  ;test result
                                trap_ne
                        
1afd : 68                       pla         ;load status
                                eor_flag lo~fnz ;mask bits not altered
                        
1b00 : cd2002                   cmp fLDx+3  ;test flags
                                trap_ne
                        
                        
1b05 : a200                     ldx #0
1b07 : a50c                     lda zpt
1b09 : 49c3                     eor #$c3
1b0b : c515                     cmp zp1
                                trap_ne     ;store to zp data
                        
1b0f : 860c                     stx zpt     ;clear
1b11 : ad0302                   lda abst
1b14 : 49c3                     eor #$c3
1b16 : cd1802                   cmp abs1
                                trap_ne     ;store to abs data
                        
1b1b : 8e0302                   stx abst    ;clear
1b1e : a50d                     lda zpt+1
1b20 : 49c3                     eor #$c3
1b22 : c516                     cmp zp1+1
                                trap_ne     ;store to zp data
                        
1b26 : 860d                     stx zpt+1   ;clear
1b28 : ad0402                   lda abst+1
1b2b : 49c3                     eor #$c3
1b2d : cd1902                   cmp abs1+1
                                trap_ne     ;store to abs data
                        
1b32 : 8e0402                   stx abst+1  ;clear
1b35 : a50e                     lda zpt+2
1b37 : 49c3                     eor #$c3
1b39 : c517                     cmp zp1+2
                                trap_ne     ;store to zp data
                        
1b3d : 860e                     stx zpt+2   ;clear
1b3f : ad0502                   lda abst+2
1b42 : 49c3                     eor #$c3
1b44 : cd1a02                   cmp abs1+2
                                trap_ne     ;store to abs data
                        
1b49 : 8e0502                   stx abst+2  ;clear
1b4c : a50f                     lda zpt+3
1b4e : 49c3                     eor #$c3
1b50 : c518                     cmp zp1+3
                                trap_ne     ;store to zp data
                        
1b54 : 860f                     stx zpt+3   ;clear
1b56 : ad0602                   lda abst+3
1b59 : 49c3                     eor #$c3
1b5b : cd1b02                   cmp abs1+3
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   73
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                                trap_ne     ;store to abs data
                        
1b60 : 8e0602                   stx abst+3  ;clear
                                next_test
                        
                        
                        ; testing bit test & compares BIT CPX CPY CMP all addressing modes
                        ; BIT - zp / abs
                                set_a $ff,0
                        
1b75 : 2418                     bit zp1+3   ;00 - should set Z / clear  NV
                                tst_a $ff,fz
                        
                                set_a 1,0
                        
1b89 : 2417                     bit zp1+2   ;41 - should set V (M6) / clear NZ
                                tst_a 1,fv
                        
                                set_a 1,0
                        
1b9d : 2416                     bit zp1+1   ;82 - should set N (M7) & Z / clear V
                                tst_a 1,fnz
                        
                                set_a 1,0
                        
1bb1 : 2415                     bit zp1     ;c3 - should set N (M7) & V (M6) / clear Z
                                tst_a 1,fnv
                        
                        
                                set_a $ff,$ff
                        
1bc5 : 2418                     bit zp1+3   ;00 - should set Z / clear  NV
                                tst_a $ff,~fnv
                        
                                set_a 1,$ff
                        
1bd9 : 2417                     bit zp1+2   ;41 - should set V (M6) / clear NZ
                                tst_a 1,~fnz
                        
                                set_a 1,$ff
                        
1bed : 2416                     bit zp1+1   ;82 - should set N (M7) & Z / clear V
                                tst_a 1,~fv
                        
                                set_a 1,$ff
                        
1c01 : 2415                     bit zp1     ;c3 - should set N (M7) & V (M6) / clear Z
                                tst_a 1,~fz
                        
                        
                                set_a $ff,0
                        
1c15 : 2c1b02                   bit abs1+3  ;00 - should set Z / clear  NV
                                tst_a $ff,fz
                        
                                set_a 1,0
                        
1c2a : 2c1a02                   bit abs1+2  ;41 - should set V (M6) / clear NZ
                                tst_a 1,fv
                        
                                set_a 1,0
                        
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   74
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

1c3f : 2c1902                   bit abs1+1  ;82 - should set N (M7) & Z / clear V
                                tst_a 1,fnz
                        
                                set_a 1,0
                        
1c54 : 2c1802                   bit abs1    ;c3 - should set N (M7) & V (M6) / clear Z
                                tst_a 1,fnv
                        
                        
                                set_a $ff,$ff
                        
1c69 : 2c1b02                   bit abs1+3  ;00 - should set Z / clear  NV
                                tst_a $ff,~fnv
                        
                                set_a 1,$ff
                        
1c7e : 2c1a02                   bit abs1+2  ;41 - should set V (M6) / clear NZ
                                tst_a 1,~fnz
                        
                                set_a 1,$ff
                        
1c93 : 2c1902                   bit abs1+1  ;82 - should set N (M7) & Z / clear V
                                tst_a 1,~fv
                        
                                set_a 1,$ff
                        
1ca8 : 2c1802                   bit abs1    ;c3 - should set N (M7) & V (M6) / clear Z
                                tst_a 1,~fz
                        
                                next_test
                        
                        
                        ; CPX - zp / abs / #
                                set_x $80,0
                        
1cc9 : e419                     cpx zp7f
                                tst_stat fc
                        
1cd3 : ca                       dex
1cd4 : e419                     cpx zp7f
                                tst_stat fzc
                        
1cde : ca                       dex
1cdf : e419                     cpx zp7f
                                tst_x $7e,fn
                        
                                set_x $80,$ff
                        
1cf3 : e419                     cpx zp7f
                                tst_stat ~fnz
                        
1cfd : ca                       dex
1cfe : e419                     cpx zp7f
                                tst_stat ~fn
                        
1d08 : ca                       dex
1d09 : e419                     cpx zp7f
                                tst_x $7e,~fzc
                        
                        
                                set_x $80,0
                        
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   75
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

1d1d : ec1c02                   cpx abs7f
                                tst_stat fc
                        
1d28 : ca                       dex
1d29 : ec1c02                   cpx abs7f
                                tst_stat fzc
                        
1d34 : ca                       dex
1d35 : ec1c02                   cpx abs7f
                                tst_x $7e,fn
                        
                                set_x $80,$ff
                        
1d4a : ec1c02                   cpx abs7f
                                tst_stat ~fnz
                        
1d55 : ca                       dex
1d56 : ec1c02                   cpx abs7f
                                tst_stat ~fn
                        
1d61 : ca                       dex
1d62 : ec1c02                   cpx abs7f
                                tst_x $7e,~fzc
                        
                        
                                set_x $80,0
                        
1d77 : e07f                     cpx #$7f
                                tst_stat fc
                        
1d81 : ca                       dex
1d82 : e07f                     cpx #$7f
                                tst_stat fzc
                        
1d8c : ca                       dex
1d8d : e07f                     cpx #$7f
                                tst_x $7e,fn
                        
                                set_x $80,$ff
                        
1da1 : e07f                     cpx #$7f
                                tst_stat ~fnz
                        
1dab : ca                       dex
1dac : e07f                     cpx #$7f
                                tst_stat ~fn
                        
1db6 : ca                       dex
1db7 : e07f                     cpx #$7f
                                tst_x $7e,~fzc
                        
                                next_test
                        
                        
                        ; CPY - zp / abs / #
                                set_y $80,0
                        
1dd7 : c419                     cpy zp7f
                                tst_stat fc
                        
1de1 : 88                       dey
1de2 : c419                     cpy zp7f
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   76
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                                tst_stat fzc
                        
1dec : 88                       dey
1ded : c419                     cpy zp7f
                                tst_y $7e,fn
                        
                                set_y $80,$ff
                        
1e01 : c419                     cpy zp7f
                                tst_stat ~fnz
                        
1e0b : 88                       dey
1e0c : c419                     cpy zp7f
                                tst_stat ~fn
                        
1e16 : 88                       dey
1e17 : c419                     cpy zp7f
                                tst_y $7e,~fzc
                        
                        
                                set_y $80,0
                        
1e2b : cc1c02                   cpy abs7f
                                tst_stat fc
                        
1e36 : 88                       dey
1e37 : cc1c02                   cpy abs7f
                                tst_stat fzc
                        
1e42 : 88                       dey
1e43 : cc1c02                   cpy abs7f
                                tst_y $7e,fn
                        
                                set_y $80,$ff
                        
1e58 : cc1c02                   cpy abs7f
                                tst_stat ~fnz
                        
1e63 : 88                       dey
1e64 : cc1c02                   cpy abs7f
                                tst_stat ~fn
                        
1e6f : 88                       dey
1e70 : cc1c02                   cpy abs7f
                                tst_y $7e,~fzc
                        
                        
                                set_y $80,0
                        
1e85 : c07f                     cpy #$7f
                                tst_stat fc
                        
1e8f : 88                       dey
1e90 : c07f                     cpy #$7f
                                tst_stat fzc
                        
1e9a : 88                       dey
1e9b : c07f                     cpy #$7f
                                tst_y $7e,fn
                        
                                set_y $80,$ff
                        
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   77
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

1eaf : c07f                     cpy #$7f
                                tst_stat ~fnz
                        
1eb9 : 88                       dey
1eba : c07f                     cpy #$7f
                                tst_stat ~fn
                        
1ec4 : 88                       dey
1ec5 : c07f                     cpy #$7f
                                tst_y $7e,~fzc
                        
                                next_test
                        
                        
                        ; CMP - zp / abs / #
                                set_a $80,0
                        
1ee5 : c519                     cmp zp7f
                                tst_a $80,fc
                        
                                set_a $7f,0
                        
1ef9 : c519                     cmp zp7f
                                tst_a $7f,fzc
                        
                                set_a $7e,0
                        
1f0d : c519                     cmp zp7f
                                tst_a $7e,fn
                        
                                set_a $80,$ff
                        
1f21 : c519                     cmp zp7f
                                tst_a $80,~fnz
                        
                                set_a $7f,$ff
                        
1f35 : c519                     cmp zp7f
                                tst_a $7f,~fn
                        
                                set_a $7e,$ff
                        
1f49 : c519                     cmp zp7f
                                tst_a $7e,~fzc
                        
                        
                                set_a $80,0
                        
1f5d : cd1c02                   cmp abs7f
                                tst_a $80,fc
                        
                                set_a $7f,0
                        
1f72 : cd1c02                   cmp abs7f
                                tst_a $7f,fzc
                        
                                set_a $7e,0
                        
1f87 : cd1c02                   cmp abs7f
                                tst_a $7e,fn
                        
                                set_a $80,$ff
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   78
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                        
1f9c : cd1c02                   cmp abs7f
                                tst_a $80,~fnz
                        
                                set_a $7f,$ff
                        
1fb1 : cd1c02                   cmp abs7f
                                tst_a $7f,~fn
                        
                                set_a $7e,$ff
                        
1fc6 : cd1c02                   cmp abs7f
                                tst_a $7e,~fzc
                        
                        
                                set_a $80,0
                        
1fdb : c97f                     cmp #$7f
                                tst_a $80,fc
                        
                                set_a $7f,0
                        
1fef : c97f                     cmp #$7f
                                tst_a $7f,fzc
                        
                                set_a $7e,0
                        
2003 : c97f                     cmp #$7f
                                tst_a $7e,fn
                        
                                set_a $80,$ff
                        
2017 : c97f                     cmp #$7f
                                tst_a $80,~fnz
                        
                                set_a $7f,$ff
                        
202b : c97f                     cmp #$7f
                                tst_a $7f,~fn
                        
                                set_a $7e,$ff
                        
203f : c97f                     cmp #$7f
                                tst_a $7e,~fzc
                        
                        
204d : a204                     ldx #4          ;with indexing by X
                                set_a $80,0
                        
2055 : d515                     cmp zp1,x
                                tst_a $80,fc
                        
                                set_a $7f,0
                        
2069 : d515                     cmp zp1,x
                                tst_a $7f,fzc
                        
                                set_a $7e,0
                        
207d : d515                     cmp zp1,x
                                tst_a $7e,fn
                        
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   79
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                                set_a $80,$ff
                        
2091 : d515                     cmp zp1,x
                                tst_a $80,~fnz
                        
                                set_a $7f,$ff
                        
20a5 : d515                     cmp zp1,x
                                tst_a $7f,~fn
                        
                                set_a $7e,$ff
                        
20b9 : d515                     cmp zp1,x
                                tst_a $7e,~fzc
                        
                        
                                set_a $80,0
                        
20cd : dd1802                   cmp abs1,x
                                tst_a $80,fc
                        
                                set_a $7f,0
                        
20e2 : dd1802                   cmp abs1,x
                                tst_a $7f,fzc
                        
                                set_a $7e,0
                        
20f7 : dd1802                   cmp abs1,x
                                tst_a $7e,fn
                        
                                set_a $80,$ff
                        
210c : dd1802                   cmp abs1,x
                                tst_a $80,~fnz
                        
                                set_a $7f,$ff
                        
2121 : dd1802                   cmp abs1,x
                                tst_a $7f,~fn
                        
                                set_a $7e,$ff
                        
2136 : dd1802                   cmp abs1,x
                                tst_a $7e,~fzc
                        
                        
2145 : a004                     ldy #4          ;with indexing by Y
2147 : a208                     ldx #8          ;with indexed indirect
                                set_a $80,0
                        
214f : d91802                   cmp abs1,y
                                tst_a $80,fc
                        
                                set_a $7f,0
                        
2164 : d91802                   cmp abs1,y
                                tst_a $7f,fzc
                        
                                set_a $7e,0
                        
2179 : d91802                   cmp abs1,y
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   80
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                                tst_a $7e,fn
                        
                                set_a $80,$ff
                        
218e : d91802                   cmp abs1,y
                                tst_a $80,~fnz
                        
                                set_a $7f,$ff
                        
21a3 : d91802                   cmp abs1,y
                                tst_a $7f,~fn
                        
                                set_a $7e,$ff
                        
21b8 : d91802                   cmp abs1,y
                                tst_a $7e,~fzc
                        
                        
                                set_a $80,0
                        
21cd : c126                     cmp (ind1,x)
                                tst_a $80,fc
                        
                                set_a $7f,0
                        
21e1 : c126                     cmp (ind1,x)
                                tst_a $7f,fzc
                        
                                set_a $7e,0
                        
21f5 : c126                     cmp (ind1,x)
                                tst_a $7e,fn
                        
                                set_a $80,$ff
                        
2209 : c126                     cmp (ind1,x)
                                tst_a $80,~fnz
                        
                                set_a $7f,$ff
                        
221d : c126                     cmp (ind1,x)
                                tst_a $7f,~fn
                        
                                set_a $7e,$ff
                        
2231 : c126                     cmp (ind1,x)
                                tst_a $7e,~fzc
                        
                        
                                set_a $80,0
                        
2245 : d126                     cmp (ind1),y
                                tst_a $80,fc
                        
                                set_a $7f,0
                        
2259 : d126                     cmp (ind1),y
                                tst_a $7f,fzc
                        
                                set_a $7e,0
                        
226d : d126                     cmp (ind1),y
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   81
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                                tst_a $7e,fn
                        
                                set_a $80,$ff
                        
2281 : d126                     cmp (ind1),y
                                tst_a $80,~fnz
                        
                                set_a $7f,$ff
                        
2295 : d126                     cmp (ind1),y
                                tst_a $7f,~fn
                        
                                set_a $7e,$ff
                        
22a9 : d126                     cmp (ind1),y
                                tst_a $7e,~fzc
                        
                                next_test
                        
                        
                        ; testing shifts - ASL LSR ROL ROR all addressing modes
                        ; shifts - accumulator
22c3 : a205                     ldx #5
22c5 :                  tasl
                                set_ax zps,0
                        
22cb : 0a                       asl a
                                tst_ax rASL,fASL,0
                        
22da : ca                       dex
22db : 10e8                     bpl tasl
22dd : a205                     ldx #5
22df :                  tasl1
                                set_ax zps,$ff
                        
22e5 : 0a                       asl a
                                tst_ax rASL,fASL,$ff-fnzc
                        
22f4 : ca                       dex
22f5 : 10e8                     bpl tasl1
                        
22f7 : a205                     ldx #5
22f9 :                  tlsr
                                set_ax zps,0
                        
22ff : 4a                       lsr a
                                tst_ax rLSR,fLSR,0
                        
230e : ca                       dex
230f : 10e8                     bpl tlsr
2311 : a205                     ldx #5
2313 :                  tlsr1
                                set_ax zps,$ff
                        
2319 : 4a                       lsr a
                                tst_ax rLSR,fLSR,$ff-fnzc
                        
2328 : ca                       dex
2329 : 10e8                     bpl tlsr1
                        
232b : a205                     ldx #5
232d :                  trol
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   82
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                                set_ax zps,0
                        
2333 : 2a                       rol a
                                tst_ax rROL,fROL,0
                        
2342 : ca                       dex
2343 : 10e8                     bpl trol
2345 : a205                     ldx #5
2347 :                  trol1
                                set_ax zps,$ff-fc
                        
234d : 2a                       rol a
                                tst_ax rROL,fROL,$ff-fnzc
                        
235c : ca                       dex
235d : 10e8                     bpl trol1
                        
235f : a205                     ldx #5
2361 :                  trolc
                                set_ax zps,fc
                        
2367 : 2a                       rol a
                                tst_ax rROLc,fROLc,0
                        
2376 : ca                       dex
2377 : 10e8                     bpl trolc
2379 : a205                     ldx #5
237b :                  trolc1
                                set_ax zps,$ff
                        
2381 : 2a                       rol a
                                tst_ax rROLc,fROLc,$ff-fnzc
                        
2390 : ca                       dex
2391 : 10e8                     bpl trolc1
                        
2393 : a205                     ldx #5
2395 :                  tror
                                set_ax zps,0
                        
239b : 6a                       ror a
                                tst_ax rROR,fROR,0
                        
23aa : ca                       dex
23ab : 10e8                     bpl tror
23ad : a205                     ldx #5
23af :                  tror1
                                set_ax zps,$ff-fc
                        
23b5 : 6a                       ror a
                                tst_ax rROR,fROR,$ff-fnzc
                        
23c4 : ca                       dex
23c5 : 10e8                     bpl tror1
                        
23c7 : a205                     ldx #5
23c9 :                  trorc
                                set_ax zps,fc
                        
23cf : 6a                       ror a
                                tst_ax rRORc,fRORc,0
                        
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   83
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

23de : ca                       dex
23df : 10e8                     bpl trorc
23e1 : a205                     ldx #5
23e3 :                  trorc1
                                set_ax zps,$ff
                        
23e9 : 6a                       ror a
                                tst_ax rRORc,fRORc,$ff-fnzc
                        
23f8 : ca                       dex
23f9 : 10e8                     bpl trorc1
                                next_test
                        
                        
                        ; shifts - zeropage
2407 : a205                     ldx #5
2409 :                  tasl2
                                set_z zps,0
                        
2411 : 060c                     asl zpt
                                tst_z rASL,fASL,0
                        
2423 : ca                       dex
2424 : 10e3                     bpl tasl2
2426 : a205                     ldx #5
2428 :                  tasl3
                                set_z zps,$ff
                        
2430 : 060c                     asl zpt
                                tst_z rASL,fASL,$ff-fnzc
                        
2442 : ca                       dex
2443 : 10e3                     bpl tasl3
                        
2445 : a205                     ldx #5
2447 :                  tlsr2
                                set_z zps,0
                        
244f : 460c                     lsr zpt
                                tst_z rLSR,fLSR,0
                        
2461 : ca                       dex
2462 : 10e3                     bpl tlsr2
2464 : a205                     ldx #5
2466 :                  tlsr3
                                set_z zps,$ff
                        
246e : 460c                     lsr zpt
                                tst_z rLSR,fLSR,$ff-fnzc
                        
2480 : ca                       dex
2481 : 10e3                     bpl tlsr3
                        
2483 : a205                     ldx #5
2485 :                  trol2
                                set_z zps,0
                        
248d : 260c                     rol zpt
                                tst_z rROL,fROL,0
                        
249f : ca                       dex
24a0 : 10e3                     bpl trol2
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   84
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

24a2 : a205                     ldx #5
24a4 :                  trol3
                                set_z zps,$ff-fc
                        
24ac : 260c                     rol zpt
                                tst_z rROL,fROL,$ff-fnzc
                        
24be : ca                       dex
24bf : 10e3                     bpl trol3
                        
24c1 : a205                     ldx #5
24c3 :                  trolc2
                                set_z zps,fc
                        
24cb : 260c                     rol zpt
                                tst_z rROLc,fROLc,0
                        
24dd : ca                       dex
24de : 10e3                     bpl trolc2
24e0 : a205                     ldx #5
24e2 :                  trolc3
                                set_z zps,$ff
                        
24ea : 260c                     rol zpt
                                tst_z rROLc,fROLc,$ff-fnzc
                        
24fc : ca                       dex
24fd : 10e3                     bpl trolc3
                        
24ff : a205                     ldx #5
2501 :                  tror2
                                set_z zps,0
                        
2509 : 660c                     ror zpt
                                tst_z rROR,fROR,0
                        
251b : ca                       dex
251c : 10e3                     bpl tror2
251e : a205                     ldx #5
2520 :                  tror3
                                set_z zps,$ff-fc
                        
2528 : 660c                     ror zpt
                                tst_z rROR,fROR,$ff-fnzc
                        
253a : ca                       dex
253b : 10e3                     bpl tror3
                        
253d : a205                     ldx #5
253f :                  trorc2
                                set_z zps,fc
                        
2547 : 660c                     ror zpt
                                tst_z rRORc,fRORc,0
                        
2559 : ca                       dex
255a : 10e3                     bpl trorc2
255c : a205                     ldx #5
255e :                  trorc3
                                set_z zps,$ff
                        
2566 : 660c                     ror zpt
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   85
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                                tst_z rRORc,fRORc,$ff-fnzc
                        
2578 : ca                       dex
2579 : 10e3                     bpl trorc3
                                next_test
                        
                        
                        ; shifts - absolute
2587 : a205                     ldx #5
2589 :                  tasl4
                                set_abs zps,0
                        
2592 : 0e0302                   asl abst
                                tst_abs rASL,fASL,0
                        
25a6 : ca                       dex
25a7 : 10e0                     bpl tasl4
25a9 : a205                     ldx #5
25ab :                  tasl5
                                set_abs zps,$ff
                        
25b4 : 0e0302                   asl abst
                                tst_abs rASL,fASL,$ff-fnzc
                        
25c8 : ca                       dex
25c9 : 10e0                     bpl tasl5
                        
25cb : a205                     ldx #5
25cd :                  tlsr4
                                set_abs zps,0
                        
25d6 : 4e0302                   lsr abst
                                tst_abs rLSR,fLSR,0
                        
25ea : ca                       dex
25eb : 10e0                     bpl tlsr4
25ed : a205                     ldx #5
25ef :                  tlsr5
                                set_abs zps,$ff
                        
25f8 : 4e0302                   lsr abst
                                tst_abs rLSR,fLSR,$ff-fnzc
                        
260c : ca                       dex
260d : 10e0                     bpl tlsr5
                        
260f : a205                     ldx #5
2611 :                  trol4
                                set_abs zps,0
                        
261a : 2e0302                   rol abst
                                tst_abs rROL,fROL,0
                        
262e : ca                       dex
262f : 10e0                     bpl trol4
2631 : a205                     ldx #5
2633 :                  trol5
                                set_abs zps,$ff-fc
                        
263c : 2e0302                   rol abst
                                tst_abs rROL,fROL,$ff-fnzc
                        
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   86
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

2650 : ca                       dex
2651 : 10e0                     bpl trol5
                        
2653 : a205                     ldx #5
2655 :                  trolc4
                                set_abs zps,fc
                        
265e : 2e0302                   rol abst
                                tst_abs rROLc,fROLc,0
                        
2672 : ca                       dex
2673 : 10e0                     bpl trolc4
2675 : a205                     ldx #5
2677 :                  trolc5
                                set_abs zps,$ff
                        
2680 : 2e0302                   rol abst
                                tst_abs rROLc,fROLc,$ff-fnzc
                        
2694 : ca                       dex
2695 : 10e0                     bpl trolc5
                        
2697 : a205                     ldx #5
2699 :                  tror4
                                set_abs zps,0
                        
26a2 : 6e0302                   ror abst
                                tst_abs rROR,fROR,0
                        
26b6 : ca                       dex
26b7 : 10e0                     bpl tror4
26b9 : a205                     ldx #5
26bb :                  tror5
                                set_abs zps,$ff-fc
                        
26c4 : 6e0302                   ror abst
                                tst_abs rROR,fROR,$ff-fnzc
                        
26d8 : ca                       dex
26d9 : 10e0                     bpl tror5
                        
26db : a205                     ldx #5
26dd :                  trorc4
                                set_abs zps,fc
                        
26e6 : 6e0302                   ror abst
                                tst_abs rRORc,fRORc,0
                        
26fa : ca                       dex
26fb : 10e0                     bpl trorc4
26fd : a205                     ldx #5
26ff :                  trorc5
                                set_abs zps,$ff
                        
2708 : 6e0302                   ror abst
                                tst_abs rRORc,fRORc,$ff-fnzc
                        
271c : ca                       dex
271d : 10e0                     bpl trorc5
                                next_test
                        
                        
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   87
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                        ; shifts - zp indexed
272b : a205                     ldx #5
272d :                  tasl6
                                set_zx zps,0
                        
2735 : 160c                     asl zpt,x
                                tst_zx rASL,fASL,0
                        
2747 : ca                       dex
2748 : 10e3                     bpl tasl6
274a : a205                     ldx #5
274c :                  tasl7
                                set_zx zps,$ff
                        
2754 : 160c                     asl zpt,x
                                tst_zx rASL,fASL,$ff-fnzc
                        
2766 : ca                       dex
2767 : 10e3                     bpl tasl7
                        
2769 : a205                     ldx #5
276b :                  tlsr6
                                set_zx zps,0
                        
2773 : 560c                     lsr zpt,x
                                tst_zx rLSR,fLSR,0
                        
2785 : ca                       dex
2786 : 10e3                     bpl tlsr6
2788 : a205                     ldx #5
278a :                  tlsr7
                                set_zx zps,$ff
                        
2792 : 560c                     lsr zpt,x
                                tst_zx rLSR,fLSR,$ff-fnzc
                        
27a4 : ca                       dex
27a5 : 10e3                     bpl tlsr7
                        
27a7 : a205                     ldx #5
27a9 :                  trol6
                                set_zx zps,0
                        
27b1 : 360c                     rol zpt,x
                                tst_zx rROL,fROL,0
                        
27c3 : ca                       dex
27c4 : 10e3                     bpl trol6
27c6 : a205                     ldx #5
27c8 :                  trol7
                                set_zx zps,$ff-fc
                        
27d0 : 360c                     rol zpt,x
                                tst_zx rROL,fROL,$ff-fnzc
                        
27e2 : ca                       dex
27e3 : 10e3                     bpl trol7
                        
27e5 : a205                     ldx #5
27e7 :                  trolc6
                                set_zx zps,fc
                        
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   88
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

27ef : 360c                     rol zpt,x
                                tst_zx rROLc,fROLc,0
                        
2801 : ca                       dex
2802 : 10e3                     bpl trolc6
2804 : a205                     ldx #5
2806 :                  trolc7
                                set_zx zps,$ff
                        
280e : 360c                     rol zpt,x
                                tst_zx rROLc,fROLc,$ff-fnzc
                        
2820 : ca                       dex
2821 : 10e3                     bpl trolc7
                        
2823 : a205                     ldx #5
2825 :                  tror6
                                set_zx zps,0
                        
282d : 760c                     ror zpt,x
                                tst_zx rROR,fROR,0
                        
283f : ca                       dex
2840 : 10e3                     bpl tror6
2842 : a205                     ldx #5
2844 :                  tror7
                                set_zx zps,$ff-fc
                        
284c : 760c                     ror zpt,x
                                tst_zx rROR,fROR,$ff-fnzc
                        
285e : ca                       dex
285f : 10e3                     bpl tror7
                        
2861 : a205                     ldx #5
2863 :                  trorc6
                                set_zx zps,fc
                        
286b : 760c                     ror zpt,x
                                tst_zx rRORc,fRORc,0
                        
287d : ca                       dex
287e : 10e3                     bpl trorc6
2880 : a205                     ldx #5
2882 :                  trorc7
                                set_zx zps,$ff
                        
288a : 760c                     ror zpt,x
                                tst_zx rRORc,fRORc,$ff-fnzc
                        
289c : ca                       dex
289d : 10e3                     bpl trorc7
                                next_test
                        
                        
                        ; shifts - abs indexed
28ab : a205                     ldx #5
28ad :                  tasl8
                                set_absx zps,0
                        
28b6 : 1e0302                   asl abst,x
                                tst_absx rASL,fASL,0
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   89
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                        
28ca : ca                       dex
28cb : 10e0                     bpl tasl8
28cd : a205                     ldx #5
28cf :                  tasl9
                                set_absx zps,$ff
                        
28d8 : 1e0302                   asl abst,x
                                tst_absx rASL,fASL,$ff-fnzc
                        
28ec : ca                       dex
28ed : 10e0                     bpl tasl9
                        
28ef : a205                     ldx #5
28f1 :                  tlsr8
                                set_absx zps,0
                        
28fa : 5e0302                   lsr abst,x
                                tst_absx rLSR,fLSR,0
                        
290e : ca                       dex
290f : 10e0                     bpl tlsr8
2911 : a205                     ldx #5
2913 :                  tlsr9
                                set_absx zps,$ff
                        
291c : 5e0302                   lsr abst,x
                                tst_absx rLSR,fLSR,$ff-fnzc
                        
2930 : ca                       dex
2931 : 10e0                     bpl tlsr9
                        
2933 : a205                     ldx #5
2935 :                  trol8
                                set_absx zps,0
                        
293e : 3e0302                   rol abst,x
                                tst_absx rROL,fROL,0
                        
2952 : ca                       dex
2953 : 10e0                     bpl trol8
2955 : a205                     ldx #5
2957 :                  trol9
                                set_absx zps,$ff-fc
                        
2960 : 3e0302                   rol abst,x
                                tst_absx rROL,fROL,$ff-fnzc
                        
2974 : ca                       dex
2975 : 10e0                     bpl trol9
                        
2977 : a205                     ldx #5
2979 :                  trolc8
                                set_absx zps,fc
                        
2982 : 3e0302                   rol abst,x
                                tst_absx rROLc,fROLc,0
                        
2996 : ca                       dex
2997 : 10e0                     bpl trolc8
2999 : a205                     ldx #5
299b :                  trolc9
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   90
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                                set_absx zps,$ff
                        
29a4 : 3e0302                   rol abst,x
                                tst_absx rROLc,fROLc,$ff-fnzc
                        
29b8 : ca                       dex
29b9 : 10e0                     bpl trolc9
                        
29bb : a205                     ldx #5
29bd :                  tror8
                                set_absx zps,0
                        
29c6 : 7e0302                   ror abst,x
                                tst_absx rROR,fROR,0
                        
29da : ca                       dex
29db : 10e0                     bpl tror8
29dd : a205                     ldx #5
29df :                  tror9
                                set_absx zps,$ff-fc
                        
29e8 : 7e0302                   ror abst,x
                                tst_absx rROR,fROR,$ff-fnzc
                        
29fc : ca                       dex
29fd : 10e0                     bpl tror9
                        
29ff : a205                     ldx #5
2a01 :                  trorc8
                                set_absx zps,fc
                        
2a0a : 7e0302                   ror abst,x
                                tst_absx rRORc,fRORc,0
                        
2a1e : ca                       dex
2a1f : 10e0                     bpl trorc8
2a21 : a205                     ldx #5
2a23 :                  trorc9
                                set_absx zps,$ff
                        
2a2c : 7e0302                   ror abst,x
                                tst_absx rRORc,fRORc,$ff-fnzc
                        
2a40 : ca                       dex
2a41 : 10e0                     bpl trorc9
                                next_test
                        
                        
                        ; testing memory increment/decrement - INC DEC all addressing modes
                        ; zeropage
2a4f : a200                     ldx #0
2a51 : a97e                     lda #$7e
2a53 : 850c                     sta zpt
2a55 :                  tinc
                                set_stat 0
                        
2a59 : e60c                     inc zpt
                                tst_z rINC,fINC,0
                        
2a6b : e8                       inx
2a6c : e002                     cpx #2
2a6e : d004                     bne tinc1
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   91
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

2a70 : a9fe                     lda #$fe
2a72 : 850c                     sta zpt
2a74 : e005             tinc1   cpx #5
2a76 : d0dd                     bne tinc
2a78 : ca                       dex
2a79 : e60c                     inc zpt
2a7b :                  tdec
                                set_stat 0
                        
2a7f : c60c                     dec zpt
                                tst_z rINC,fINC,0
                        
2a91 : ca                       dex
2a92 : 300a                     bmi tdec1
2a94 : e001                     cpx #1
2a96 : d0e3                     bne tdec
2a98 : a981                     lda #$81
2a9a : 850c                     sta zpt
2a9c : d0dd                     bne tdec
2a9e :                  tdec1
2a9e : a200                     ldx #0
2aa0 : a97e                     lda #$7e
2aa2 : 850c                     sta zpt
2aa4 :                  tinc10
                                set_stat $ff
                        
2aa8 : e60c                     inc zpt
                                tst_z rINC,fINC,$ff-fnz
                        
2aba : e8                       inx
2abb : e002                     cpx #2
2abd : d004                     bne tinc11
2abf : a9fe                     lda #$fe
2ac1 : 850c                     sta zpt
2ac3 : e005             tinc11  cpx #5
2ac5 : d0dd                     bne tinc10
2ac7 : ca                       dex
2ac8 : e60c                     inc zpt
2aca :                  tdec10
                                set_stat $ff
                        
2ace : c60c                     dec zpt
                                tst_z rINC,fINC,$ff-fnz
                        
2ae0 : ca                       dex
2ae1 : 300a                     bmi tdec11
2ae3 : e001                     cpx #1
2ae5 : d0e3                     bne tdec10
2ae7 : a981                     lda #$81
2ae9 : 850c                     sta zpt
2aeb : d0dd                     bne tdec10
2aed :                  tdec11
                                next_test
                        
                        
                        ; absolute memory
2af9 : a200                     ldx #0
2afb : a97e                     lda #$7e
2afd : 8d0302                   sta abst
2b00 :                  tinc2
                                set_stat 0
                        
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   92
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

2b04 : ee0302                   inc abst
                                tst_abs rINC,fINC,0
                        
2b18 : e8                       inx
2b19 : e002                     cpx #2
2b1b : d005                     bne tinc3
2b1d : a9fe                     lda #$fe
2b1f : 8d0302                   sta abst
2b22 : e005             tinc3   cpx #5
2b24 : d0da                     bne tinc2
2b26 : ca                       dex
2b27 : ee0302                   inc abst
2b2a :                  tdec2
                                set_stat 0
                        
2b2e : ce0302                   dec abst
                                tst_abs rINC,fINC,0
                        
2b42 : ca                       dex
2b43 : 300b                     bmi tdec3
2b45 : e001                     cpx #1
2b47 : d0e1                     bne tdec2
2b49 : a981                     lda #$81
2b4b : 8d0302                   sta abst
2b4e : d0da                     bne tdec2
2b50 :                  tdec3
2b50 : a200                     ldx #0
2b52 : a97e                     lda #$7e
2b54 : 8d0302                   sta abst
2b57 :                  tinc12
                                set_stat $ff
                        
2b5b : ee0302                   inc abst
                                tst_abs rINC,fINC,$ff-fnz
                        
2b6f : e8                       inx
2b70 : e002                     cpx #2
2b72 : d005                     bne tinc13
2b74 : a9fe                     lda #$fe
2b76 : 8d0302                   sta abst
2b79 : e005             tinc13   cpx #5
2b7b : d0da                     bne tinc12
2b7d : ca                       dex
2b7e : ee0302                   inc abst
2b81 :                  tdec12
                                set_stat $ff
                        
2b85 : ce0302                   dec abst
                                tst_abs rINC,fINC,$ff-fnz
                        
2b99 : ca                       dex
2b9a : 300b                     bmi tdec13
2b9c : e001                     cpx #1
2b9e : d0e1                     bne tdec12
2ba0 : a981                     lda #$81
2ba2 : 8d0302                   sta abst
2ba5 : d0da                     bne tdec12
2ba7 :                  tdec13
                                next_test
                        
                        
                        ; zeropage indexed
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   93
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

2bb3 : a200                     ldx #0
2bb5 : a97e                     lda #$7e
2bb7 : 950c             tinc4   sta zpt,x
                                set_stat 0
                        
2bbd : f60c                     inc zpt,x
                                tst_zx rINC,fINC,0
                        
2bcf : b50c                     lda zpt,x
2bd1 : e8                       inx
2bd2 : e002                     cpx #2
2bd4 : d002                     bne tinc5
2bd6 : a9fe                     lda #$fe
2bd8 : e005             tinc5   cpx #5
2bda : d0db                     bne tinc4
2bdc : ca                       dex
2bdd : a902                     lda #2
2bdf : 950c             tdec4   sta zpt,x
                                set_stat 0
                        
2be5 : d60c                     dec zpt,x
                                tst_zx rINC,fINC,0
                        
2bf7 : b50c                     lda zpt,x
2bf9 : ca                       dex
2bfa : 3008                     bmi tdec5
2bfc : e001                     cpx #1
2bfe : d0df                     bne tdec4
2c00 : a981                     lda #$81
2c02 : d0db                     bne tdec4
2c04 :                  tdec5
2c04 : a200                     ldx #0
2c06 : a97e                     lda #$7e
2c08 : 950c             tinc14  sta zpt,x
                                set_stat $ff
                        
2c0e : f60c                     inc zpt,x
                                tst_zx rINC,fINC,$ff-fnz
                        
2c20 : b50c                     lda zpt,x
2c22 : e8                       inx
2c23 : e002                     cpx #2
2c25 : d002                     bne tinc15
2c27 : a9fe                     lda #$fe
2c29 : e005             tinc15  cpx #5
2c2b : d0db                     bne tinc14
2c2d : ca                       dex
2c2e : a902                     lda #2
2c30 : 950c             tdec14  sta zpt,x
                                set_stat $ff
                        
2c36 : d60c                     dec zpt,x
                                tst_zx rINC,fINC,$ff-fnz
                        
2c48 : b50c                     lda zpt,x
2c4a : ca                       dex
2c4b : 3008                     bmi tdec15
2c4d : e001                     cpx #1
2c4f : d0df                     bne tdec14
2c51 : a981                     lda #$81
2c53 : d0db                     bne tdec14
2c55 :                  tdec15
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   94
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                                next_test
                        
                        
                        ; memory indexed
2c61 : a200                     ldx #0
2c63 : a97e                     lda #$7e
2c65 : 9d0302           tinc6   sta abst,x
                                set_stat 0
                        
2c6c : fe0302                   inc abst,x
                                tst_absx rINC,fINC,0
                        
2c80 : bd0302                   lda abst,x
2c83 : e8                       inx
2c84 : e002                     cpx #2
2c86 : d002                     bne tinc7
2c88 : a9fe                     lda #$fe
2c8a : e005             tinc7   cpx #5
2c8c : d0d7                     bne tinc6
2c8e : ca                       dex
2c8f : a902                     lda #2
2c91 : 9d0302           tdec6   sta abst,x
                                set_stat 0
                        
2c98 : de0302                   dec abst,x
                                tst_absx rINC,fINC,0
                        
2cac : bd0302                   lda abst,x
2caf : ca                       dex
2cb0 : 3008                     bmi tdec7
2cb2 : e001                     cpx #1
2cb4 : d0db                     bne tdec6
2cb6 : a981                     lda #$81
2cb8 : d0d7                     bne tdec6
2cba :                  tdec7
2cba : a200                     ldx #0
2cbc : a97e                     lda #$7e
2cbe : 9d0302           tinc16  sta abst,x
                                set_stat $ff
                        
2cc5 : fe0302                   inc abst,x
                                tst_absx rINC,fINC,$ff-fnz
                        
2cd9 : bd0302                   lda abst,x
2cdc : e8                       inx
2cdd : e002                     cpx #2
2cdf : d002                     bne tinc17
2ce1 : a9fe                     lda #$fe
2ce3 : e005             tinc17  cpx #5
2ce5 : d0d7                     bne tinc16
2ce7 : ca                       dex
2ce8 : a902                     lda #2
2cea : 9d0302           tdec16  sta abst,x
                                set_stat $ff
                        
2cf1 : de0302                   dec abst,x
                                tst_absx rINC,fINC,$ff-fnz
                        
2d05 : bd0302                   lda abst,x
2d08 : ca                       dex
2d09 : 3008                     bmi tdec17
2d0b : e001                     cpx #1
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   95
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

2d0d : d0db                     bne tdec16
2d0f : a981                     lda #$81
2d11 : d0d7                     bne tdec16
2d13 :                  tdec17
                                next_test
                        
                        
                        ; testing logical instructions - AND EOR ORA all addressing modes
                        ; AND
2d1f : a203                     ldx #3          ;immediate
2d21 : b51e             tand    lda zpAN,x
2d23 : 8d0a02                   sta ex_andi+1   ;set AND # operand
                                set_ax  absANa,0
                        
2d2d : 200902                   jsr ex_andi     ;execute AND # in RAM
                                tst_ax  absrlo,absflo,0
                        
2d3e : ca                       dex
2d3f : 10e0                     bpl tand
2d41 : a203                     ldx #3
2d43 : b51e             tand1   lda zpAN,x
2d45 : 8d0a02                   sta ex_andi+1   ;set AND # operand
                                set_ax  absANa,$ff
                        
2d4f : 200902                   jsr ex_andi     ;execute AND # in RAM
                                tst_ax  absrlo,absflo,$ff-fnz
                        
2d60 : ca                       dex
2d61 : 10e0                     bpl tand1
                        
2d63 : a203                     ldx #3      ;zp
2d65 : b51e             tand2   lda zpAN,x
2d67 : 850c                     sta zpt
                                set_ax  absANa,0
                        
2d70 : 250c                     and zpt
                                tst_ax  absrlo,absflo,0
                        
2d80 : ca                       dex
2d81 : 10e2                     bpl tand2
2d83 : a203                     ldx #3
2d85 : b51e             tand3   lda zpAN,x
2d87 : 850c                     sta zpt
                                set_ax  absANa,$ff
                        
2d90 : 250c                     and zpt
                                tst_ax  absrlo,absflo,$ff-fnz
                        
2da0 : ca                       dex
2da1 : 10e2                     bpl tand3
                        
2da3 : a203                     ldx #3      ;abs
2da5 : b51e             tand4   lda zpAN,x
2da7 : 8d0302                   sta abst
                                set_ax  absANa,0
                        
2db1 : 2d0302                   and abst
                                tst_ax  absrlo,absflo,0
                        
2dc2 : ca                       dex
2dc3 : 10e0                     bpl tand4
2dc5 : a203                     ldx #3
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   96
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

2dc7 : b51e             tand5   lda zpAN,x
2dc9 : 8d0302                   sta abst
                                set_ax  absANa,$ff
                        
2dd3 : 2d0302                   and abst
                                tst_ax  absrlo,absflo,$ff-fnz
                        
2de4 : ca                       dex
2de5 : 1002                     bpl tand6
                        
2de7 : a203                     ldx #3      ;zp,x
2de9 :                  tand6
                                set_ax  absANa,0
                        
2df0 : 351e                     and zpAN,x
                                tst_ax  absrlo,absflo,0
                        
2e00 : ca                       dex
2e01 : 10e6                     bpl tand6
2e03 : a203                     ldx #3
2e05 :                  tand7
                                set_ax  absANa,$ff
                        
2e0c : 351e                     and zpAN,x
                                tst_ax  absrlo,absflo,$ff-fnz
                        
2e1c : ca                       dex
2e1d : 10e6                     bpl tand7
                        
2e1f : a203                     ldx #3      ;abs,x
2e21 :                  tand8
                                set_ax  absANa,0
                        
2e28 : 3d5f02                   and absAN,x
                                tst_ax  absrlo,absflo,0
                        
2e39 : ca                       dex
2e3a : 10e5                     bpl tand8
2e3c : a203                     ldx #3
2e3e :                  tand9
                                set_ax  absANa,$ff
                        
2e45 : 3d5f02                   and absAN,x
                                tst_ax  absrlo,absflo,$ff-fnz
                        
2e56 : ca                       dex
2e57 : 10e5                     bpl tand9
                        
2e59 : a003                     ldy #3      ;abs,y
2e5b :                  tand10
                                set_ay  absANa,0
                        
2e62 : 395f02                   and absAN,y
                                tst_ay  absrlo,absflo,0
                        
2e73 : 88                       dey
2e74 : 10e5                     bpl tand10
2e76 : a003                     ldy #3
2e78 :                  tand11
                                set_ay  absANa,$ff
                        
2e7f : 395f02                   and absAN,y
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   97
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                                tst_ay  absrlo,absflo,$ff-fnz
                        
2e90 : 88                       dey
2e91 : 10e5                     bpl tand11
                        
2e93 : a206                     ldx #6      ;(zp,x)
2e95 : a003                     ldy #3
2e97 :                  tand12
                                set_ay  absANa,0
                        
2e9e : 213c                     and (indAN,x)
                                tst_ay  absrlo,absflo,0
                        
2eae : ca                       dex
2eaf : ca                       dex
2eb0 : 88                       dey
2eb1 : 10e4                     bpl tand12
2eb3 : a206                     ldx #6
2eb5 : a003                     ldy #3
2eb7 :                  tand13
                                set_ay  absANa,$ff
                        
2ebe : 213c                     and (indAN,x)
                                tst_ay  absrlo,absflo,$ff-fnz
                        
2ece : ca                       dex
2ecf : ca                       dex
2ed0 : 88                       dey
2ed1 : 10e4                     bpl tand13
                        
2ed3 : a003                     ldy #3      ;(zp),y
2ed5 :                  tand14
                                set_ay  absANa,0
                        
2edc : 313c                     and (indAN),y
                                tst_ay  absrlo,absflo,0
                        
2eec : 88                       dey
2eed : 10e6                     bpl tand14
2eef : a003                     ldy #3
2ef1 :                  tand15
                                set_ay  absANa,$ff
                        
2ef8 : 313c                     and (indAN),y
                                tst_ay  absrlo,absflo,$ff-fnz
                        
2f08 : 88                       dey
2f09 : 10e6                     bpl tand15
                                next_test
                        
                        
                        ; EOR
2f17 : a203                     ldx #3          ;immediate - self modifying code
2f19 : b522             teor    lda zpEO,x
2f1b : 8d0d02                   sta ex_eori+1   ;set EOR # operand
                                set_ax  absEOa,0
                        
2f25 : 200c02                   jsr ex_eori     ;execute EOR # in RAM
                                tst_ax  absrlo,absflo,0
                        
2f36 : ca                       dex
2f37 : 10e0                     bpl teor
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   98
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

2f39 : a203                     ldx #3
2f3b : b522             teor1   lda zpEO,x
2f3d : 8d0d02                   sta ex_eori+1   ;set EOR # operand
                                set_ax  absEOa,$ff
                        
2f47 : 200c02                   jsr ex_eori     ;execute EOR # in RAM
                                tst_ax  absrlo,absflo,$ff-fnz
                        
2f58 : ca                       dex
2f59 : 10e0                     bpl teor1
                        
2f5b : a203                     ldx #3      ;zp
2f5d : b522             teor2    lda zpEO,x
2f5f : 850c                     sta zpt
                                set_ax  absEOa,0
                        
2f68 : 450c                     eor zpt
                                tst_ax  absrlo,absflo,0
                        
2f78 : ca                       dex
2f79 : 10e2                     bpl teor2
2f7b : a203                     ldx #3
2f7d : b522             teor3   lda zpEO,x
2f7f : 850c                     sta zpt
                                set_ax  absEOa,$ff
                        
2f88 : 450c                     eor zpt
                                tst_ax  absrlo,absflo,$ff-fnz
                        
2f98 : ca                       dex
2f99 : 10e2                     bpl teor3
                        
2f9b : a203                     ldx #3      ;abs
2f9d : b522             teor4   lda zpEO,x
2f9f : 8d0302                   sta abst
                                set_ax  absEOa,0
                        
2fa9 : 4d0302                   eor abst
                                tst_ax  absrlo,absflo,0
                        
2fba : ca                       dex
2fbb : 10e0                     bpl teor4
2fbd : a203                     ldx #3
2fbf : b522             teor5   lda zpEO,x
2fc1 : 8d0302                   sta abst
                                set_ax  absEOa,$ff
                        
2fcb : 4d0302                   eor abst
                                tst_ax  absrlo,absflo,$ff-fnz
                        
2fdc : ca                       dex
2fdd : 1002                     bpl teor6
                        
2fdf : a203                     ldx #3      ;zp,x
2fe1 :                  teor6
                                set_ax  absEOa,0
                        
2fe8 : 5522                     eor zpEO,x
                                tst_ax  absrlo,absflo,0
                        
2ff8 : ca                       dex
2ff9 : 10e6                     bpl teor6
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page   99
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

2ffb : a203                     ldx #3
2ffd :                  teor7
                                set_ax  absEOa,$ff
                        
3004 : 5522                     eor zpEO,x
                                tst_ax  absrlo,absflo,$ff-fnz
                        
3014 : ca                       dex
3015 : 10e6                     bpl teor7
                        
3017 : a203                     ldx #3      ;abs,x
3019 :                  teor8
                                set_ax  absEOa,0
                        
3020 : 5d6302                   eor absEO,x
                                tst_ax  absrlo,absflo,0
                        
3031 : ca                       dex
3032 : 10e5                     bpl teor8
3034 : a203                     ldx #3
3036 :                  teor9
                                set_ax  absEOa,$ff
                        
303d : 5d6302                   eor absEO,x
                                tst_ax  absrlo,absflo,$ff-fnz
                        
304e : ca                       dex
304f : 10e5                     bpl teor9
                        
3051 : a003                     ldy #3      ;abs,y
3053 :                  teor10
                                set_ay  absEOa,0
                        
305a : 596302                   eor absEO,y
                                tst_ay  absrlo,absflo,0
                        
306b : 88                       dey
306c : 10e5                     bpl teor10
306e : a003                     ldy #3
3070 :                  teor11
                                set_ay  absEOa,$ff
                        
3077 : 596302                   eor absEO,y
                                tst_ay  absrlo,absflo,$ff-fnz
                        
3088 : 88                       dey
3089 : 10e5                     bpl teor11
                        
308b : a206                     ldx #6      ;(zp,x)
308d : a003                     ldy #3
308f :                  teor12
                                set_ay  absEOa,0
                        
3096 : 4144                     eor (indEO,x)
                                tst_ay  absrlo,absflo,0
                        
30a6 : ca                       dex
30a7 : ca                       dex
30a8 : 88                       dey
30a9 : 10e4                     bpl teor12
30ab : a206                     ldx #6
30ad : a003                     ldy #3
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  100
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

30af :                  teor13
                                set_ay  absEOa,$ff
                        
30b6 : 4144                     eor (indEO,x)
                                tst_ay  absrlo,absflo,$ff-fnz
                        
30c6 : ca                       dex
30c7 : ca                       dex
30c8 : 88                       dey
30c9 : 10e4                     bpl teor13
                        
30cb : a003                     ldy #3      ;(zp),y
30cd :                  teor14
                                set_ay  absEOa,0
                        
30d4 : 5144                     eor (indEO),y
                                tst_ay  absrlo,absflo,0
                        
30e4 : 88                       dey
30e5 : 10e6                     bpl teor14
30e7 : a003                     ldy #3
30e9 :                  teor15
                                set_ay  absEOa,$ff
                        
30f0 : 5144                     eor (indEO),y
                                tst_ay  absrlo,absflo,$ff-fnz
                        
3100 : 88                       dey
3101 : 10e6                     bpl teor15
                                next_test
                        
                        
                        ; OR
310f : a203                     ldx #3          ;immediate - self modifying code
3111 : b51a             tora    lda zpOR,x
3113 : 8d1002                   sta ex_orai+1   ;set ORA # operand
                                set_ax  absORa,0
                        
311d : 200f02                   jsr ex_orai     ;execute ORA # in RAM
                                tst_ax  absrlo,absflo,0
                        
312e : ca                       dex
312f : 10e0                     bpl tora
3131 : a203                     ldx #3
3133 : b51a             tora1   lda zpOR,x
3135 : 8d1002                   sta ex_orai+1   ;set ORA # operand
                                set_ax  absORa,$ff
                        
313f : 200f02                   jsr ex_orai     ;execute ORA # in RAM
                                tst_ax  absrlo,absflo,$ff-fnz
                        
3150 : ca                       dex
3151 : 10e0                     bpl tora1
                        
3153 : a203                     ldx #3      ;zp
3155 : b51a             tora2   lda zpOR,x
3157 : 850c                     sta zpt
                                set_ax  absORa,0
                        
3160 : 050c                     ora zpt
                                tst_ax  absrlo,absflo,0
                        
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  101
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

3170 : ca                       dex
3171 : 10e2                     bpl tora2
3173 : a203                     ldx #3
3175 : b51a             tora3   lda zpOR,x
3177 : 850c                     sta zpt
                                set_ax  absORa,$ff
                        
3180 : 050c                     ora zpt
                                tst_ax  absrlo,absflo,$ff-fnz
                        
3190 : ca                       dex
3191 : 10e2                     bpl tora3
                        
3193 : a203                     ldx #3      ;abs
3195 : b51a             tora4   lda zpOR,x
3197 : 8d0302                   sta abst
                                set_ax  absORa,0
                        
31a1 : 0d0302                   ora abst
                                tst_ax  absrlo,absflo,0
                        
31b2 : ca                       dex
31b3 : 10e0                     bpl tora4
31b5 : a203                     ldx #3
31b7 : b51a             tora5   lda zpOR,x
31b9 : 8d0302                   sta abst
                                set_ax  absORa,$ff
                        
31c3 : 0d0302                   ora abst
                                tst_ax  absrlo,absflo,$ff-fnz
                        
31d4 : ca                       dex
31d5 : 1002                     bpl tora6
                        
31d7 : a203                     ldx #3      ;zp,x
31d9 :                  tora6
                                set_ax  absORa,0
                        
31e0 : 151a                     ora zpOR,x
                                tst_ax  absrlo,absflo,0
                        
31f0 : ca                       dex
31f1 : 10e6                     bpl tora6
31f3 : a203                     ldx #3
31f5 :                  tora7
                                set_ax  absORa,$ff
                        
31fc : 151a                     ora zpOR,x
                                tst_ax  absrlo,absflo,$ff-fnz
                        
320c : ca                       dex
320d : 10e6                     bpl tora7
                        
320f : a203                     ldx #3      ;abs,x
3211 :                  tora8
                                set_ax  absORa,0
                        
3218 : 1d5b02                   ora absOR,x
                                tst_ax  absrlo,absflo,0
                        
3229 : ca                       dex
322a : 10e5                     bpl tora8
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  102
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

322c : a203                     ldx #3
322e :                  tora9
                                set_ax  absORa,$ff
                        
3235 : 1d5b02                   ora absOR,x
                                tst_ax  absrlo,absflo,$ff-fnz
                        
3246 : ca                       dex
3247 : 10e5                     bpl tora9
                        
3249 : a003                     ldy #3      ;abs,y
324b :                  tora10
                                set_ay  absORa,0
                        
3252 : 195b02                   ora absOR,y
                                tst_ay  absrlo,absflo,0
                        
3263 : 88                       dey
3264 : 10e5                     bpl tora10
3266 : a003                     ldy #3
3268 :                  tora11
                                set_ay  absORa,$ff
                        
326f : 195b02                   ora absOR,y
                                tst_ay  absrlo,absflo,$ff-fnz
                        
3280 : 88                       dey
3281 : 10e5                     bpl tora11
                        
3283 : a206                     ldx #6      ;(zp,x)
3285 : a003                     ldy #3
3287 :                  tora12
                                set_ay  absORa,0
                        
328e : 014c                     ora (indOR,x)
                                tst_ay  absrlo,absflo,0
                        
329e : ca                       dex
329f : ca                       dex
32a0 : 88                       dey
32a1 : 10e4                     bpl tora12
32a3 : a206                     ldx #6
32a5 : a003                     ldy #3
32a7 :                  tora13
                                set_ay  absORa,$ff
                        
32ae : 014c                     ora (indOR,x)
                                tst_ay  absrlo,absflo,$ff-fnz
                        
32be : ca                       dex
32bf : ca                       dex
32c0 : 88                       dey
32c1 : 10e4                     bpl tora13
                        
32c3 : a003                     ldy #3      ;(zp),y
32c5 :                  tora14
                                set_ay  absORa,0
                        
32cc : 114c                     ora (indOR),y
                                tst_ay  absrlo,absflo,0
                        
32dc : 88                       dey
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  103
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

32dd : 10e6                     bpl tora14
32df : a003                     ldy #3
32e1 :                  tora15
                                set_ay  absORa,$ff
                        
32e8 : 114c                     ora (indOR),y
                                tst_ay  absrlo,absflo,$ff-fnz
                        
32f8 : 88                       dey
32f9 : 10e6                     bpl tora15
                            if I_flag = 3
32fb : 58                       cli
                            endif
                                next_test
                        
                        
                        ; full binary add/subtract test
                        ; iterates through all combinations of operands and carry input
                        ; uses increments/decrements to predict result & result flags
3308 : d8                       cld
3309 : a20e                     ldx #ad2        ;for indexed test
330b : a0ff                     ldy #$ff        ;max range
330d : a900                     lda #0          ;start with adding zeroes & no carry
330f : 850c                     sta adfc        ;carry in - for diag
3311 : 850d                     sta ad1         ;operand 1 - accumulator
3313 : 850e                     sta ad2         ;operand 2 - memory or immediate
3315 : 8d0302                   sta ada2        ;non zp
3318 : 850f                     sta adrl        ;expected result bits 0-7
331a : 8510                     sta adrh        ;expected result bit 8 (carry out)
331c : a9ff                     lda #$ff        ;complemented operand 2 for subtract
331e : 8512                     sta sb2
3320 : 8d0402                   sta sba2        ;non zp
3323 : a902                     lda #2          ;expected Z-flag
3325 : 8511                     sta adrf
3327 : 18               tadd    clc             ;test with carry clear
3328 : 207333                   jsr chkadd
332b : e60c                     inc adfc        ;now with carry
332d : e60f                     inc adrl        ;result +1
332f : 08                       php             ;save N & Z from low result
3330 : 08                       php
3331 : 68                       pla             ;accu holds expected flags
3332 : 2982                     and #$82        ;mask N & Z
3334 : 28                       plp
3335 : d002                     bne tadd1
3337 : e610                     inc adrh        ;result bit 8 - carry
3339 : 0510             tadd1   ora adrh        ;merge C to expected flags
333b : 8511                     sta adrf        ;save expected flags except overflow
333d : 38                       sec             ;test with carry set
333e : 207333                   jsr chkadd
3341 : c60c                     dec adfc        ;same for operand +1 but no carry
3343 : e60d                     inc ad1
3345 : d0e0                     bne tadd        ;iterate op1
3347 : a900                     lda #0          ;preset result to op2 when op1 = 0
3349 : 8510                     sta adrh
334b : ee0302                   inc ada2
334e : e60e                     inc ad2
3350 : 08                       php             ;save NZ as operand 2 becomes the new result
3351 : 68                       pla
3352 : 2982                     and #$82        ;mask N00000Z0
3354 : 8511                     sta adrf        ;no need to check carry as we are adding to 0
3356 : c612                     dec sb2         ;complement subtract operand 2
3358 : ce0402                   dec sba2
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  104
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

335b : a50e                     lda ad2
335d : 850f                     sta adrl
335f : d0c6                     bne tadd        ;iterate op2
                            if disable_decimal < 1
                                next_test
                        
                        ; decimal add/subtract test
                        ; *** WARNING - tests documented behavior only! ***
                        ;   only valid BCD operands are tested, N V Z flags are ignored
                        ; iterates through all valid combinations of operands and carry input
                        ; uses increments/decrements to predict result & carry flag
                                sed
                                ldx #ad2        ;for indexed test
                                ldy #$ff        ;max range
                                lda #$99        ;start with adding 99 to 99 with carry
                                sta ad1         ;operand 1 - accumulator
                                sta ad2         ;operand 2 - memory or immediate
                                sta ada2        ;non zp
                                sta adrl        ;expected result bits 0-7
                                lda #1          ;set carry in & out
                                sta adfc        ;carry in - for diag
                                sta adrh        ;expected result bit 8 (carry out)
                                lda #0          ;complemented operand 2 for subtract
                                sta sb2
                                sta sba2        ;non zp
                        tdad    sec             ;test with carry set
                                jsr chkdad
                                dec adfc        ;now with carry clear
                                lda adrl        ;decimal adjust result
                                bne tdad1       ;skip clear carry & preset result 99 (9A-1)
                                dec adrh
                                lda #$99
                                sta adrl
                                bne tdad3
                        tdad1   and #$f         ;lower nibble mask
                                bne tdad2       ;no decimal adjust needed
                                dec adrl        ;decimal adjust (?0-6)
                                dec adrl
                                dec adrl
                                dec adrl
                                dec adrl
                                dec adrl
                        tdad2   dec adrl        ;result -1
                        tdad3   clc             ;test with carry clear
                                jsr chkdad
                                inc adfc        ;same for operand -1 but with carry
                                lda ad1         ;decimal adjust operand 1
                                beq tdad5       ;iterate operand 2
                                and #$f         ;lower nibble mask
                                bne tdad4       ;skip decimal adjust
                                dec ad1         ;decimal adjust (?0-6)
                                dec ad1
                                dec ad1
                                dec ad1
                                dec ad1
                                dec ad1
                        tdad4   dec ad1         ;operand 1 -1
                                jmp tdad        ;iterate op1
                        
                        tdad5   lda #$99        ;precharge op1 max
                                sta ad1
                                lda ad2         ;decimal adjust operand 2
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  105
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                                beq tdad7       ;end of iteration
                                and #$f         ;lower nibble mask
                                bne tdad6       ;skip decimal adjust
                                dec ad2         ;decimal adjust (?0-6)
                                dec ad2
                                dec ad2
                                dec ad2
                                dec ad2
                                dec ad2
                                inc sb2         ;complemented decimal adjust for subtract (?9+6)
                                inc sb2
                                inc sb2
                                inc sb2
                                inc sb2
                                inc sb2
                        tdad6   dec ad2         ;operand 2 -1
                                inc sb2         ;complemented operand for subtract
                                lda sb2
                                sta sba2        ;copy as non zp operand
                                lda ad2
                                sta ada2        ;copy as non zp operand
                                sta adrl        ;new result since op1+carry=00+carry +op2=op2
                                inc adrh        ;result carry
                                bne tdad        ;iterate op2
                        tdad7
                                next_test
                        
                        ; decimal/binary switch test
                        ; tests CLD, SED, PLP, RTI to properly switch between decimal & binary opcode
                        ;   tables
                                clc
                                cld
                                php
                                lda #$55
                                adc #$55
                                cmp #$aa
                                trap_ne         ;expected binary result after cld
                                clc
                                sed
                                php
                                lda #$55
                                adc #$55
                                cmp #$10
                                trap_ne         ;expected decimal result after sed
                                cld
                                plp
                                lda #$55
                                adc #$55
                                cmp #$10
                                trap_ne         ;expected decimal result after plp D=1
                                plp
                                lda #$55
                                adc #$55
                                cmp #$aa
                                trap_ne         ;expected binary result after plp D=0
                                clc
                                lda #hi bin_rti_ret ;emulated interrupt for rti
                                pha
                                lda #lo bin_rti_ret
                                pha
                                php
                                sed
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  106
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                                lda #hi dec_rti_ret ;emulated interrupt for rti
                                pha
                                lda #lo dec_rti_ret
                                pha
                                php
                                cld
                                rti
                        dec_rti_ret
                                lda #$55
                                adc #$55
                                cmp #$10
                                trap_ne         ;expected decimal result after rti D=1
                                rti
                        bin_rti_ret
                                lda #$55
                                adc #$55
                                cmp #$aa
                                trap_ne         ;expected binary result after rti D=0
                            endif
                        
3361 : ad0002                   lda test_case
3364 : c929                     cmp #test_num
                                trap_ne         ;previous test is out of sequence
                        
3368 : a9f0                     lda #$f0        ;mark opcode testing complete
336a : 8d0002                   sta test_case
                        
                        ; final RAM integrity test
                        ;   verifies that none of the previous tests has altered RAM outside of the
                        ;   designated write areas.
                                check_ram
                        
                        ; *** DEBUG INFO ***
                        ; to debug checksum errors uncomment check_ram in the next_test macro to
                        ; narrow down the responsible opcode.
                        ; may give false errors when monitor, OS or other background activity is
                        ; allowed during previous tests.
                        
                        
                        ; S U C C E S S ************************************************
                        ; -------------
                                success         ;if you get here everything went well
                        
                        ; -------------
                        ; S U C C E S S ************************************************
3370 : 4c0004                   jmp start       ;run again
                        
                            if disable_decimal < 1
                        ; core subroutine of the decimal add/subtract test
                        ; *** WARNING - tests documented behavior only! ***
                        ;   only valid BCD operands are tested, N V Z flags are ignored
                        ; iterates through all valid combinations of operands and carry input
                        ; uses increments/decrements to predict result & carry flag
                        chkdad
                        ; decimal ADC / SBC zp
                                php             ;save carry for subtract
                                lda ad1
                                adc ad2         ;perform add
                                php
                                cmp adrl        ;check result
                                trap_ne         ;bad result
                                pla             ;check flags
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  107
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                                and #1          ;mask carry
                                cmp adrh
                                trap_ne         ;bad carry
                                plp
                                php             ;save carry for next add
                                lda ad1
                                sbc sb2         ;perform subtract
                                php
                                cmp adrl        ;check result
                                trap_ne         ;bad result
                                pla             ;check flags
                                and #1          ;mask carry
                                cmp adrh
                                trap_ne         ;bad flags
                                plp
                        ; decimal ADC / SBC abs
                                php             ;save carry for subtract
                                lda ad1
                                adc ada2        ;perform add
                                php
                                cmp adrl        ;check result
                                trap_ne         ;bad result
                                pla             ;check flags
                                and #1          ;mask carry
                                cmp adrh
                                trap_ne         ;bad carry
                                plp
                                php             ;save carry for next add
                                lda ad1
                                sbc sba2        ;perform subtract
                                php
                                cmp adrl        ;check result
                                trap_ne         ;bad result
                                pla             ;check flags
                                and #1          ;mask carry
                                cmp adrh
                                trap_ne         ;bad carry
                                plp
                        ; decimal ADC / SBC #
                                php             ;save carry for subtract
                                lda ad2
                                sta ex_adci+1   ;set ADC # operand
                                lda ad1
                                jsr ex_adci     ;execute ADC # in RAM
                                php
                                cmp adrl        ;check result
                                trap_ne         ;bad result
                                pla             ;check flags
                                and #1          ;mask carry
                                cmp adrh
                                trap_ne         ;bad carry
                                plp
                                php             ;save carry for next add
                                lda sb2
                                sta ex_sbci+1   ;set SBC # operand
                                lda ad1
                                jsr ex_sbci     ;execute SBC # in RAM
                                php
                                cmp adrl        ;check result
                                trap_ne         ;bad result
                                pla             ;check flags
                                and #1          ;mask carry
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  108
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                                cmp adrh
                                trap_ne         ;bad carry
                                plp
                        ; decimal ADC / SBC zp,x
                                php             ;save carry for subtract
                                lda ad1
                                adc 0,x         ;perform add
                                php
                                cmp adrl        ;check result
                                trap_ne         ;bad result
                                pla             ;check flags
                                and #1          ;mask carry
                                cmp adrh
                                trap_ne         ;bad carry
                                plp
                                php             ;save carry for next add
                                lda ad1
                                sbc sb2-ad2,x   ;perform subtract
                                php
                                cmp adrl        ;check result
                                trap_ne         ;bad result
                                pla             ;check flags
                                and #1          ;mask carry
                                cmp adrh
                                trap_ne         ;bad carry
                                plp
                        ; decimal ADC / SBC abs,x
                                php             ;save carry for subtract
                                lda ad1
                                adc ada2-ad2,x  ;perform add
                                php
                                cmp adrl        ;check result
                                trap_ne         ;bad result
                                pla             ;check flags
                                and #1          ;mask carry
                                cmp adrh
                                trap_ne         ;bad carry
                                plp
                                php             ;save carry for next add
                                lda ad1
                                sbc sba2-ad2,x  ;perform subtract
                                php
                                cmp adrl        ;check result
                                trap_ne         ;bad result
                                pla             ;check flags
                                and #1          ;mask carry
                                cmp adrh
                                trap_ne         ;bad carry
                                plp
                        ; decimal ADC / SBC abs,y
                                php             ;save carry for subtract
                                lda ad1
                                adc ada2-$ff,y  ;perform add
                                php
                                cmp adrl        ;check result
                                trap_ne         ;bad result
                                pla             ;check flags
                                and #1          ;mask carry
                                cmp adrh
                                trap_ne         ;bad carry
                                plp
                                php             ;save carry for next add
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  109
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                                lda ad1
                                sbc sba2-$ff,y  ;perform subtract
                                php
                                cmp adrl        ;check result
                                trap_ne         ;bad result
                                pla             ;check flags
                                and #1          ;mask carry
                                cmp adrh
                                trap_ne         ;bad carry
                                plp
                        ; decimal ADC / SBC (zp,x)
                                php             ;save carry for subtract
                                lda ad1
                                adc (lo adi2-ad2,x) ;perform add
                                php
                                cmp adrl        ;check result
                                trap_ne         ;bad result
                                pla             ;check flags
                                and #1          ;mask carry
                                cmp adrh
                                trap_ne         ;bad carry
                                plp
                                php             ;save carry for next add
                                lda ad1
                                sbc (lo sbi2-ad2,x) ;perform subtract
                                php
                                cmp adrl        ;check result
                                trap_ne         ;bad result
                                pla             ;check flags
                                and #1          ;mask carry
                                cmp adrh
                                trap_ne         ;bad carry
                                plp
                        ; decimal ADC / SBC (abs),y
                                php             ;save carry for subtract
                                lda ad1
                                adc (adiy2),y   ;perform add
                                php
                                cmp adrl        ;check result
                                trap_ne         ;bad result
                                pla             ;check flags
                                and #1          ;mask carry
                                cmp adrh
                                trap_ne         ;bad carry
                                plp
                                php             ;save carry for next add
                                lda ad1
                                sbc (sbiy2),y   ;perform subtract
                                php
                                cmp adrl        ;check result
                                trap_ne         ;bad result
                                pla             ;check flags
                                and #1          ;mask carry
                                cmp adrh
                                trap_ne         ;bad carry
                                plp
                                rts
                            endif
                        
                        ; core subroutine of the full binary add/subtract test
                        ; iterates through all combinations of operands and carry input
                        ; uses increments/decrements to predict result & result flags
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  110
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

3373 : a511             chkadd  lda adrf        ;add V-flag if overflow
3375 : 2983                     and #$83        ;keep N-----ZC / clear V
3377 : 48                       pha
3378 : a50d                     lda ad1         ;test sign unequal between operands
337a : 450e                     eor ad2
337c : 300a                     bmi ckad1       ;no overflow possible - operands have different sign
337e : a50d                     lda ad1         ;test sign equal between operands and result
3380 : 450f                     eor adrl
3382 : 1004                     bpl ckad1       ;no overflow occured - operand and result have same sign
3384 : 68                       pla
3385 : 0940                     ora #$40        ;set V
3387 : 48                       pha
3388 : 68               ckad1   pla
3389 : 8511                     sta adrf        ;save expected flags
                        ; binary ADC / SBC zp
338b : 08                       php             ;save carry for subtract
338c : a50d                     lda ad1
338e : 650e                     adc ad2         ;perform add
3390 : 08                       php
3391 : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
                        
3395 : 68                       pla             ;check flags
3396 : 29c3                     and #$c3        ;mask NV----ZC
3398 : c511                     cmp adrf
                                trap_ne         ;bad flags
                        
339c : 28                       plp
339d : 08                       php             ;save carry for next add
339e : a50d                     lda ad1
33a0 : e512                     sbc sb2         ;perform subtract
33a2 : 08                       php
33a3 : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
                        
33a7 : 68                       pla             ;check flags
33a8 : 29c3                     and #$c3        ;mask NV----ZC
33aa : c511                     cmp adrf
                                trap_ne         ;bad flags
                        
33ae : 28                       plp
                        ; binary ADC / SBC abs
33af : 08                       php             ;save carry for subtract
33b0 : a50d                     lda ad1
33b2 : 6d0302                   adc ada2        ;perform add
33b5 : 08                       php
33b6 : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
                        
33ba : 68                       pla             ;check flags
33bb : 29c3                     and #$c3        ;mask NV----ZC
33bd : c511                     cmp adrf
                                trap_ne         ;bad flags
                        
33c1 : 28                       plp
33c2 : 08                       php             ;save carry for next add
33c3 : a50d                     lda ad1
33c5 : ed0402                   sbc sba2        ;perform subtract
33c8 : 08                       php
33c9 : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
                        
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  111
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

33cd : 68                       pla             ;check flags
33ce : 29c3                     and #$c3        ;mask NV----ZC
33d0 : c511                     cmp adrf
                                trap_ne         ;bad flags
                        
33d4 : 28                       plp
                        ; binary ADC / SBC #
33d5 : 08                       php             ;save carry for subtract
33d6 : a50e                     lda ad2
33d8 : 8d1302                   sta ex_adci+1   ;set ADC # operand
33db : a50d                     lda ad1
33dd : 201202                   jsr ex_adci     ;execute ADC # in RAM
33e0 : 08                       php
33e1 : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
                        
33e5 : 68                       pla             ;check flags
33e6 : 29c3                     and #$c3        ;mask NV----ZC
33e8 : c511                     cmp adrf
                                trap_ne         ;bad flags
                        
33ec : 28                       plp
33ed : 08                       php             ;save carry for next add
33ee : a512                     lda sb2
33f0 : 8d1602                   sta ex_sbci+1   ;set SBC # operand
33f3 : a50d                     lda ad1
33f5 : 201502                   jsr ex_sbci     ;execute SBC # in RAM
33f8 : 08                       php
33f9 : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
                        
33fd : 68                       pla             ;check flags
33fe : 29c3                     and #$c3        ;mask NV----ZC
3400 : c511                     cmp adrf
                                trap_ne         ;bad flags
                        
3404 : 28                       plp
                        ; binary ADC / SBC zp,x
3405 : 08                       php             ;save carry for subtract
3406 : a50d                     lda ad1
3408 : 7500                     adc 0,x         ;perform add
340a : 08                       php
340b : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
                        
340f : 68                       pla             ;check flags
3410 : 29c3                     and #$c3        ;mask NV----ZC
3412 : c511                     cmp adrf
                                trap_ne         ;bad flags
                        
3416 : 28                       plp
3417 : 08                       php             ;save carry for next add
3418 : a50d                     lda ad1
341a : f504                     sbc sb2-ad2,x   ;perform subtract
341c : 08                       php
341d : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
                        
3421 : 68                       pla             ;check flags
3422 : 29c3                     and #$c3        ;mask NV----ZC
3424 : c511                     cmp adrf
                                trap_ne         ;bad flags
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  112
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                        
3428 : 28                       plp
                        ; binary ADC / SBC abs,x
3429 : 08                       php             ;save carry for subtract
342a : a50d                     lda ad1
342c : 7df501                   adc ada2-ad2,x  ;perform add
342f : 08                       php
3430 : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
                        
3434 : 68                       pla             ;check flags
3435 : 29c3                     and #$c3        ;mask NV----ZC
3437 : c511                     cmp adrf
                                trap_ne         ;bad flags
                        
343b : 28                       plp
343c : 08                       php             ;save carry for next add
343d : a50d                     lda ad1
343f : fdf601                   sbc sba2-ad2,x  ;perform subtract
3442 : 08                       php
3443 : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
                        
3447 : 68                       pla             ;check flags
3448 : 29c3                     and #$c3        ;mask NV----ZC
344a : c511                     cmp adrf
                                trap_ne         ;bad flags
                        
344e : 28                       plp
                        ; binary ADC / SBC abs,y
344f : 08                       php             ;save carry for subtract
3450 : a50d                     lda ad1
3452 : 790401                   adc ada2-$ff,y  ;perform add
3455 : 08                       php
3456 : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
                        
345a : 68                       pla             ;check flags
345b : 29c3                     and #$c3        ;mask NV----ZC
345d : c511                     cmp adrf
                                trap_ne         ;bad flags
                        
3461 : 28                       plp
3462 : 08                       php             ;save carry for next add
3463 : a50d                     lda ad1
3465 : f90501                   sbc sba2-$ff,y  ;perform subtract
3468 : 08                       php
3469 : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
                        
346d : 68                       pla             ;check flags
346e : 29c3                     and #$c3        ;mask NV----ZC
3470 : c511                     cmp adrf
                                trap_ne         ;bad flags
                        
3474 : 28                       plp
                        ; binary ADC / SBC (zp,x)
3475 : 08                       php             ;save carry for subtract
3476 : a50d                     lda ad1
3478 : 6146                     adc (lo adi2-ad2,x) ;perform add
347a : 08                       php
347b : c50f                     cmp adrl        ;check result
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  113
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                                trap_ne         ;bad result
                        
347f : 68                       pla             ;check flags
3480 : 29c3                     and #$c3        ;mask NV----ZC
3482 : c511                     cmp adrf
                                trap_ne         ;bad flags
                        
3486 : 28                       plp
3487 : 08                       php             ;save carry for next add
3488 : a50d                     lda ad1
348a : e148                     sbc (lo sbi2-ad2,x) ;perform subtract
348c : 08                       php
348d : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
                        
3491 : 68                       pla             ;check flags
3492 : 29c3                     and #$c3        ;mask NV----ZC
3494 : c511                     cmp adrf
                                trap_ne         ;bad flags
                        
3498 : 28                       plp
                        ; binary ADC / SBC (abs),y
3499 : 08                       php             ;save carry for subtract
349a : a50d                     lda ad1
349c : 7158                     adc (adiy2),y   ;perform add
349e : 08                       php
349f : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
                        
34a3 : 68                       pla             ;check flags
34a4 : 29c3                     and #$c3        ;mask NV----ZC
34a6 : c511                     cmp adrf
                                trap_ne         ;bad flags
                        
34aa : 28                       plp
34ab : 08                       php             ;save carry for next add
34ac : a50d                     lda ad1
34ae : f15a                     sbc (sbiy2),y   ;perform subtract
34b0 : 08                       php
34b1 : c50f                     cmp adrl        ;check result
                                trap_ne         ;bad result
                        
34b5 : 68                       pla             ;check flags
34b6 : 29c3                     and #$c3        ;mask NV----ZC
34b8 : c511                     cmp adrf
                                trap_ne         ;bad flags
                        
34bc : 28                       plp
34bd : 60                       rts
                        
                        ; target for the jump absolute test
34be : 88                       dey
34bf : 88                       dey
34c0 :                  test_far
34c0 : 08                       php             ;either SP or Y count will fail, if we do not hit
34c1 : 88                       dey
34c2 : 88                       dey
34c3 : 88                       dey
34c4 : 28                       plp
                                trap_cs         ;flags loaded?
                        
                                trap_vs
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  114
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                        
                                trap_mi
                        
                                trap_eq
                        
34cd : c946                     cmp #'F'        ;registers loaded?
                                trap_ne
                        
34d1 : e041                     cpx #'A'
                                trap_ne
                        
34d5 : c04f                     cpy #('R'-3)
                                trap_ne
                        
34d9 : 48                       pha             ;save a,x
34da : 8a                       txa
34db : 48                       pha
34dc : ba                       tsx
34dd : e0fd                     cpx #$fd        ;check SP
                                trap_ne
                        
34e1 : 68                       pla             ;restore x
34e2 : aa                       tax
                                set_stat $ff
                        
34e7 : 68                       pla             ;restore a
34e8 : e8                       inx             ;return registers with modifications
34e9 : 49aa                     eor #$aa        ;N=1, V=1, Z=0, C=1
34eb : 4c0f09                   jmp far_ret
                        
                        ; target for the jump indirect test
                                align
34ee : f734             ptr_tst_ind dw test_ind
34f0 : 6409             ptr_ind_ret dw ind_ret
                                trap            ;runover protection
                        
34f5 : 88                       dey
34f6 : 88                       dey
34f7 :                  test_ind
34f7 : 08                       php             ;either SP or Y count will fail, if we do not hit
34f8 : 88                       dey
34f9 : 88                       dey
34fa : 88                       dey
34fb : 28                       plp
                                trap_cs         ;flags loaded?
                        
                                trap_vs
                        
                                trap_mi
                        
                                trap_eq
                        
3504 : c949                     cmp #'I'        ;registers loaded?
                                trap_ne
                        
3508 : e04e                     cpx #'N'
                                trap_ne
                        
350c : c041                     cpy #('D'-3)
                                trap_ne
                        
3510 : 48                       pha             ;save a,x
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  115
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

3511 : 8a                       txa
3512 : 48                       pha
3513 : ba                       tsx
3514 : e0fd                     cpx #$fd        ;check SP
                                trap_ne
                        
3518 : 68                       pla             ;restore x
3519 : aa                       tax
                                set_stat $ff
                        
351e : 68                       pla             ;restore a
351f : e8                       inx             ;return registers with modifications
3520 : 49aa                     eor #$aa        ;N=1, V=1, Z=0, C=1
3522 : 6cf034                   jmp (ptr_ind_ret)
                                trap            ;runover protection
                        
3528 : 4c0004                   jmp start       ;catastrophic error - cannot continue
                        
                        ; target for the jump subroutine test
352b : 88                       dey
352c : 88                       dey
352d :                  test_jsr
352d : 08                       php             ;either SP or Y count will fail, if we do not hit
352e : 88                       dey
352f : 88                       dey
3530 : 88                       dey
3531 : 28                       plp
                                trap_cs         ;flags loaded?
                        
                                trap_vs
                        
                                trap_mi
                        
                                trap_eq
                        
353a : c94a                     cmp #'J'        ;registers loaded?
                                trap_ne
                        
353e : e053                     cpx #'S'
                                trap_ne
                        
3542 : c04f                     cpy #('R'-3)
                                trap_ne
                        
3546 : 48                       pha             ;save a,x
3547 : 8a                       txa
3548 : 48                       pha
3549 : ba                       tsx             ;sp -4? (return addr,a,x)
354a : e0fb                     cpx #$fb
                                trap_ne
                        
354e : adff01                   lda $1ff        ;propper return on stack
3551 : c909                     cmp #hi(jsr_ret)
                                trap_ne
                        
3555 : adfe01                   lda $1fe
3558 : c99a                     cmp #lo(jsr_ret)
                                trap_ne
                        
                                set_stat $ff
                        
3560 : 68                       pla             ;pull x,a
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  116
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

3561 : aa                       tax
3562 : 68                       pla
3563 : e8                       inx             ;return registers with modifications
3564 : 49aa                     eor #$aa        ;N=1, V=1, Z=0, C=1
3566 : 60                       rts
                                trap            ;runover protection
                        
356a : 4c0004                   jmp start       ;catastrophic error - cannot continue
                        
                        ;trap in case of unexpected IRQ, NMI, BRK, RESET - BRK test target
356d :                  nmi_trap
                                trap            ;check stack for conditions at NMI
                        
3570 : 4c0004                   jmp start       ;catastrophic error - cannot continue
3573 :                  res_trap
                                trap            ;unexpected RESET
                        
3576 : 4c0004                   jmp start       ;catastrophic error - cannot continue
                        
3579 : 88                       dey
357a : 88                       dey
357b :                  irq_trap                ;BRK test or unextpected BRK or IRQ
357b : 08                       php             ;either SP or Y count will fail, if we do not hit
357c : 88                       dey
357d : 88                       dey
357e : 88                       dey
                                ;next traps could be caused by unexpected BRK or IRQ
                                ;check stack for BREAK and originating location
                                ;possible jump/branch into weeds (uninitialized space)
357f : c9bd                     cmp #$ff-'B'    ;BRK pass 2 registers loaded?
3581 : f042                     beq break2
3583 : c942                     cmp #'B'        ;BRK pass 1 registers loaded?
                                trap_ne
                        
3587 : e052                     cpx #'R'
                                trap_ne
                        
358b : c048                     cpy #'K'-3
                                trap_ne
                        
358f : 850a                     sta irq_a       ;save registers during break test
3591 : 860b                     stx irq_x
3593 : ba                       tsx             ;test break on stack
3594 : bd0201                   lda $102,x
                                cmp_flag 0      ;break test should have B=1 & unused=1 on stack
                        
                                trap_ne         ; - no break flag on stack
                        
359b : 68                       pla
                                cmp_flag intdis ;should have added interrupt disable
                        
                                trap_ne
                        
35a0 : ba                       tsx
35a1 : e0fc                     cpx #$fc        ;sp -3? (return addr, flags)
                                trap_ne
                        
35a5 : adff01                   lda $1ff        ;propper return on stack
35a8 : c909                     cmp #hi(brk_ret0)
                                trap_ne
                        
35ac : adfe01                   lda $1fe
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  117
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

35af : c9d1                     cmp #lo(brk_ret0)
                                trap_ne
                        
                                load_flag $ff
                        
35b5 : 48                       pha
35b6 : a60b                     ldx irq_x
35b8 : e8                       inx             ;return registers with modifications
35b9 : a50a                     lda irq_a
35bb : 49aa                     eor #$aa
35bd : 28                       plp             ;N=1, V=1, Z=1, C=1 but original flags should be restored
35be : 40                       rti
                                trap            ;runover protection
                        
35c2 : 4c0004                   jmp start       ;catastrophic error - cannot continue
                        
35c5 :                  break2                  ;BRK pass 2
35c5 : e0ad                     cpx #$ff-'R'
                                trap_ne
                        
35c9 : c0b1                     cpy #$ff-'K'-3
                                trap_ne
                        
35cd : 850a                     sta irq_a       ;save registers during break test
35cf : 860b                     stx irq_x
35d1 : ba                       tsx             ;test break on stack
35d2 : bd0201                   lda $102,x
                                cmp_flag $ff    ;break test should have B=1
                        
                                trap_ne         ; - no break flag on stack
                        
35d9 : 68                       pla
35da : 0908                     ora #decmode    ;ignore decmode cleared if 65c02
                                cmp_flag $ff    ;actual passed flags
                        
                                trap_ne
                        
35e0 : ba                       tsx
35e1 : e0fc                     cpx #$fc        ;sp -3? (return addr, flags)
                                trap_ne
                        
35e5 : adff01                   lda $1ff        ;propper return on stack
35e8 : c909                     cmp #hi(brk_ret1)
                                trap_ne
                        
35ec : adfe01                   lda $1fe
35ef : c9f7                     cmp #lo(brk_ret1)
                                trap_ne
                        
                                load_flag intdis
                        
35f5 : 48                       pha
35f6 : a60b                     ldx irq_x
35f8 : e8                       inx             ;return registers with modifications
35f9 : a50a                     lda irq_a
35fb : 49aa                     eor #$aa
35fd : 28                       plp             ;N=0, V=0, Z=0, C=0 but original flags should be restored
35fe : 40                       rti
                                trap            ;runover protection
                        
3602 : 4c0004                   jmp start       ;catastrophic error - cannot continue
                        
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  118
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                            if report = 1
                                include "report.i65"
                            endif
                        
                        ;copy of data to initialize BSS segment
                            if load_data_direct != 1
                        zp_init
                        zps_    db  $80,1           ;additional shift pattern to test zero result & flag
                        zp1_    db  $c3,$82,$41,0   ;test patterns for LDx BIT ROL ROR ASL LSR
                        zp7f_   db  $7f             ;test pattern for compare
                        ;logical zeropage operands
                        zpOR_   db  0,$1f,$71,$80   ;test pattern for OR
                        zpAN_   db  $0f,$ff,$7f,$80 ;test pattern for AND
                        zpEO_   db  $ff,$0f,$8f,$8f ;test pattern for EOR
                        ;indirect addressing pointers
                        ind1_   dw  abs1            ;indirect pointer to pattern in absolute memory
                                dw  abs1+1
                                dw  abs1+2
                                dw  abs1+3
                                dw  abs7f
                        inw1_   dw  abs1-$f8        ;indirect pointer for wrap-test pattern
                        indt_   dw  abst            ;indirect pointer to store area in absolute memory
                                dw  abst+1
                                dw  abst+2
                                dw  abst+3
                        inwt_   dw  abst-$f8        ;indirect pointer for wrap-test store
                        indAN_  dw  absAN           ;indirect pointer to AND pattern in absolute memory
                                dw  absAN+1
                                dw  absAN+2
                                dw  absAN+3
                        indEO_  dw  absEO           ;indirect pointer to EOR pattern in absolute memory
                                dw  absEO+1
                                dw  absEO+2
                                dw  absEO+3
                        indOR_  dw  absOR           ;indirect pointer to OR pattern in absolute memory
                                dw  absOR+1
                                dw  absOR+2
                                dw  absOR+3
                        ;add/subtract indirect pointers
                        adi2_   dw  ada2            ;indirect pointer to operand 2 in absolute memory
                        sbi2_   dw  sba2            ;indirect pointer to complemented operand 2 (SBC)
                        adiy2_  dw  ada2-$ff        ;with offset for indirect indexed
                        sbiy2_  dw  sba2-$ff
                        zp_end
                            if (zp_end - zp_init) != (zp_bss_end - zp_bss)
                                ;force assembler error if size is different
                                ERROR ERROR ERROR   ;mismatch between bss and zeropage data
                            endif
                        data_init
                        ex_and_ and #0              ;execute immediate opcodes
                                rts
                        ex_eor_ eor #0              ;execute immediate opcodes
                                rts
                        ex_ora_ ora #0              ;execute immediate opcodes
                                rts
                        ex_adc_ adc #0              ;execute immediate opcodes
                                rts
                        ex_sbc_ sbc #0              ;execute immediate opcodes
                                rts
                        ;zps    db  $80,1           ;additional shift patterns test zero result & flag
                        abs1_   db  $c3,$82,$41,0   ;test patterns for LDx BIT ROL ROR ASL LSR
                        abs7f_  db  $7f             ;test pattern for compare
AS65 Assembler for R6502 [1.42].  Copyright 1994-2007, Frank A. Kingswood                                                Page  119
---------------------------------------------------- 6502_functional_test.a65 ----------------------------------------------------

                        ;loads
                        fLDx_   db  fn,fn,0,fz              ;expected flags for load
                        ;shifts
                        rASL_                               ;expected result ASL & ROL -carry
                        rROL_   db  0,2,$86,$04,$82,0
                        rROLc_  db  1,3,$87,$05,$83,1       ;expected result ROL +carry
                        rLSR_                               ;expected result LSR & ROR -carry
                        rROR_   db  $40,0,$61,$41,$20,0
                        rRORc_  db  $c0,$80,$e1,$c1,$a0,$80 ;expected result ROR +carry
                        fASL_                               ;expected flags for shifts
                        fROL_   db  fzc,0,fnc,fc,fn,fz      ;no carry in
                        fROLc_  db  fc,0,fnc,fc,fn,0        ;carry in
                        fLSR_
                        fROR_   db  0,fzc,fc,0,fc,fz        ;no carry in
                        fRORc_  db  fn,fnc,fnc,fn,fnc,fn    ;carry in
                        ;increments (decrements)
                        rINC_   db  $7f,$80,$ff,0,1         ;expected result for INC/DEC
                        fINC_   db  0,fn,fn,fz,0            ;expected flags for INC/DEC
                        ;logical memory operand
                        absOR_  db  0,$1f,$71,$80           ;test pattern for OR
                        absAN_  db  $0f,$ff,$7f,$80         ;test pattern for AND
                        absEO_  db  $ff,$0f,$8f,$8f         ;test pattern for EOR
                        ;logical accu operand
                        absORa_ db  0,$f1,$1f,0             ;test pattern for OR
                        absANa_ db  $f0,$ff,$ff,$ff         ;test pattern for AND
                        absEOa_ db  $ff,$f0,$f0,$0f         ;test pattern for EOR
                        ;logical results
                        absrlo_ db  0,$ff,$7f,$80
                        absflo_ db  fz,fn,0,fn
                        data_end
                            if (data_end - data_init) != (data_bss_end - data_bss)
                                ;force assembler error if size is different
                                ERROR ERROR ERROR   ;mismatch between bss and data
                            endif
                        
                        vec_init
                                dw  nmi_trap
                                dw  res_trap
                                dw  irq_trap
                        vec_bss equ $fffa
                            endif                   ;end of RAM init data
                        
                            if (load_data_direct = 1) & (ROM_vectors = 1)
fffa =                          org $fffa       ;vectors
fffa : 6d35                     dw  nmi_trap
fffc : 7335                     dw  res_trap
fffe : 7b35                     dw  irq_trap
                            endif
                        
fffa =                          end start
                        
                        
No errors in pass 2.
Wrote binary from address $000a through $ffff.
Total size 65526 bytes.
Program start address is at $0400 (1024).
